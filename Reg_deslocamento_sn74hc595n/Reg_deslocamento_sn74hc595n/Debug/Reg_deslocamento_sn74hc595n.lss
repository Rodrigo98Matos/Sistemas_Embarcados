
Reg_deslocamento_sn74hc595n.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  0000016c  000001e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000016c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001f0  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000220  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  00000260  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007d1  00000000  00000000  00000298  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006fc  00000000  00000000  00000a69  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002fc  00000000  00000000  00001165  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000074  00000000  00000000  00001464  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003f4  00000000  00000000  000014d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000012f  00000000  00000000  000018cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  000019fb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec e6       	ldi	r30, 0x6C	; 108
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 31       	cpi	r26, 0x10	; 16
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 9c 00 	call	0x138	; 0x138 <main>
  8e:	0c 94 b4 00 	jmp	0x168	; 0x168 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <pulso_CLK>:
			clr_bit(PORTB,D);
		pulso_CLK();
	}
	pulso_SCK();
}
void pulso_CLK(){set_bit(PORTB,CLK); clr_bit(PORTB,CLK);}
  96:	85 b1       	in	r24, 0x05	; 5
  98:	80 62       	ori	r24, 0x20	; 32
  9a:	85 b9       	out	0x05, r24	; 5
  9c:	85 b1       	in	r24, 0x05	; 5
  9e:	8f 7d       	andi	r24, 0xDF	; 223
  a0:	85 b9       	out	0x05, r24	; 5
  a2:	08 95       	ret

000000a4 <pulso_SCK>:
  a4:	85 b1       	in	r24, 0x05	; 5
  a6:	80 61       	ori	r24, 0x10	; 16
  a8:	85 b9       	out	0x05, r24	; 5
  aa:	85 b1       	in	r24, 0x05	; 5
  ac:	8f 7e       	andi	r24, 0xEF	; 239
  ae:	85 b9       	out	0x05, r24	; 5
  b0:	08 95       	ret

000000b2 <escreve>:
		for(unsigned int j = 0; j<16;j++){
			escreve(j);	_delay_ms(1000);
		}
    }
}
void escreve(unsigned int c){
  b2:	ef 92       	push	r14
  b4:	ff 92       	push	r15
  b6:	1f 93       	push	r17
  b8:	cf 93       	push	r28
  ba:	df 93       	push	r29
  bc:	cd b7       	in	r28, 0x3d	; 61
  be:	de b7       	in	r29, 0x3e	; 62
  c0:	60 97       	sbiw	r28, 0x10	; 16
  c2:	0f b6       	in	r0, 0x3f	; 63
  c4:	f8 94       	cli
  c6:	de bf       	out	0x3e, r29	; 62
  c8:	0f be       	out	0x3f, r0	; 63
  ca:	cd bf       	out	0x3d, r28	; 61
  cc:	7c 01       	movw	r14, r24
	unsigned char Dados[] = {0b11111100,0b01100000,0b11011010,0b11110011,0b01100110,0b10110111,0b10111110,0b11100001,0b11111110,0b11110110,0b11101110,0b00111110,0b10011100,0b01111010,0b10011110,0b10001110};
  ce:	80 e1       	ldi	r24, 0x10	; 16
  d0:	e0 e0       	ldi	r30, 0x00	; 0
  d2:	f1 e0       	ldi	r31, 0x01	; 1
  d4:	de 01       	movw	r26, r28
  d6:	11 96       	adiw	r26, 0x01	; 1
  d8:	01 90       	ld	r0, Z+
  da:	0d 92       	st	X+, r0
  dc:	8a 95       	dec	r24
  de:	e1 f7       	brne	.-8      	; 0xd8 <escreve+0x26>
	for(unsigned char i=0;i!=8;i++)	{
  e0:	10 e0       	ldi	r17, 0x00	; 0
  e2:	1a c0       	rjmp	.+52     	; 0x118 <escreve+0x66>
		if(!(tst_bit(Dados[c],i))) //se o bit for 1, ativa o pino de DADOS
  e4:	e1 e0       	ldi	r30, 0x01	; 1
  e6:	f0 e0       	ldi	r31, 0x00	; 0
  e8:	ec 0f       	add	r30, r28
  ea:	fd 1f       	adc	r31, r29
  ec:	ee 0d       	add	r30, r14
  ee:	ff 1d       	adc	r31, r15
  f0:	80 81       	ld	r24, Z
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	01 2e       	mov	r0, r17
  f6:	02 c0       	rjmp	.+4      	; 0xfc <escreve+0x4a>
  f8:	95 95       	asr	r25
  fa:	87 95       	ror	r24
  fc:	0a 94       	dec	r0
  fe:	e2 f7       	brpl	.-8      	; 0xf8 <escreve+0x46>
 100:	80 fd       	sbrc	r24, 0
 102:	04 c0       	rjmp	.+8      	; 0x10c <escreve+0x5a>
			set_bit(PORTB,D);
 104:	85 b1       	in	r24, 0x05	; 5
 106:	88 60       	ori	r24, 0x08	; 8
 108:	85 b9       	out	0x05, r24	; 5
 10a:	03 c0       	rjmp	.+6      	; 0x112 <escreve+0x60>
		else //se não, o zera
			clr_bit(PORTB,D);
 10c:	85 b1       	in	r24, 0x05	; 5
 10e:	87 7f       	andi	r24, 0xF7	; 247
 110:	85 b9       	out	0x05, r24	; 5
		pulso_CLK();
 112:	0e 94 4b 00 	call	0x96	; 0x96 <pulso_CLK>
		}
    }
}
void escreve(unsigned int c){
	unsigned char Dados[] = {0b11111100,0b01100000,0b11011010,0b11110011,0b01100110,0b10110111,0b10111110,0b11100001,0b11111110,0b11110110,0b11101110,0b00111110,0b10011100,0b01111010,0b10011110,0b10001110};
	for(unsigned char i=0;i!=8;i++)	{
 116:	1f 5f       	subi	r17, 0xFF	; 255
 118:	18 30       	cpi	r17, 0x08	; 8
 11a:	21 f7       	brne	.-56     	; 0xe4 <escreve+0x32>
			set_bit(PORTB,D);
		else //se não, o zera
			clr_bit(PORTB,D);
		pulso_CLK();
	}
	pulso_SCK();
 11c:	0e 94 52 00 	call	0xa4	; 0xa4 <pulso_SCK>
}
 120:	60 96       	adiw	r28, 0x10	; 16
 122:	0f b6       	in	r0, 0x3f	; 63
 124:	f8 94       	cli
 126:	de bf       	out	0x3e, r29	; 62
 128:	0f be       	out	0x3f, r0	; 63
 12a:	cd bf       	out	0x3d, r28	; 61
 12c:	df 91       	pop	r29
 12e:	cf 91       	pop	r28
 130:	1f 91       	pop	r17
 132:	ff 90       	pop	r15
 134:	ef 90       	pop	r14
 136:	08 95       	ret

00000138 <main>:
#define CLK 5		//  SH_CP [SCK] no 11 do 74HC595
void pulso_CLK();
void pulso_SCK();
void escreve(unsigned int c);
int main(void){
	DDRB = 0b00111000; //pinos PB0:2 como saídas
 138:	88 e3       	ldi	r24, 0x38	; 56
 13a:	84 b9       	out	0x04, r24	; 4
	PORTB = 0b11000111; //zera saídas
 13c:	87 ec       	ldi	r24, 0xC7	; 199
 13e:	85 b9       	out	0x05, r24	; 5
    while (1){
		for(unsigned int j = 0; j<16;j++){
 140:	c0 e0       	ldi	r28, 0x00	; 0
 142:	d0 e0       	ldi	r29, 0x00	; 0
 144:	0d c0       	rjmp	.+26     	; 0x160 <main+0x28>
			escreve(j);	_delay_ms(1000);
 146:	ce 01       	movw	r24, r28
 148:	0e 94 59 00 	call	0xb2	; 0xb2 <escreve>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 14c:	2f ef       	ldi	r18, 0xFF	; 255
 14e:	83 ed       	ldi	r24, 0xD3	; 211
 150:	90 e3       	ldi	r25, 0x30	; 48
 152:	21 50       	subi	r18, 0x01	; 1
 154:	80 40       	sbci	r24, 0x00	; 0
 156:	90 40       	sbci	r25, 0x00	; 0
 158:	e1 f7       	brne	.-8      	; 0x152 <main+0x1a>
 15a:	00 c0       	rjmp	.+0      	; 0x15c <main+0x24>
 15c:	00 00       	nop
void escreve(unsigned int c);
int main(void){
	DDRB = 0b00111000; //pinos PB0:2 como saídas
	PORTB = 0b11000111; //zera saídas
    while (1){
		for(unsigned int j = 0; j<16;j++){
 15e:	21 96       	adiw	r28, 0x01	; 1
 160:	c0 31       	cpi	r28, 0x10	; 16
 162:	d1 05       	cpc	r29, r1
 164:	80 f3       	brcs	.-32     	; 0x146 <main+0xe>
 166:	ec cf       	rjmp	.-40     	; 0x140 <main+0x8>

00000168 <_exit>:
 168:	f8 94       	cli

0000016a <__stop_program>:
 16a:	ff cf       	rjmp	.-2      	; 0x16a <__stop_program>
