
Sonar.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000014  00800100  00000144  000001b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000144  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001cc  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001fc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  0000023c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007c1  00000000  00000000  00000274  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006de  00000000  00000000  00000a35  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000031e  00000000  00000000  00001113  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000068  00000000  00000000  00001434  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003ce  00000000  00000000  0000149c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000101  00000000  00000000  0000186a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  0000196b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 e4       	ldi	r30, 0x44	; 68
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 31       	cpi	r26, 0x14	; 20
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 79 00 	call	0xf2	; 0xf2 <main>
  8e:	0c 94 a0 00 	jmp	0x140	; 0x140 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <PulsaEn>:
	0x6F   //DIGITO 9
};

//Rotinas para display de 7 segmentos
void PulsaEn() {
	set_bit(PORTD,latchPin);
  96:	8b b1       	in	r24, 0x0b	; 11
  98:	88 60       	ori	r24, 0x08	; 8
  9a:	8b b9       	out	0x0b, r24	; 11
	clr_bit(PORTD,latchPin);
  9c:	8b b1       	in	r24, 0x0b	; 11
  9e:	87 7f       	andi	r24, 0xF7	; 247
  a0:	8b b9       	out	0x0b, r24	; 11
  a2:	08 95       	ret

000000a4 <PulsaClock>:
}

void PulsaClock() {
	set_bit(PORTD,clockPin);
  a4:	8b b1       	in	r24, 0x0b	; 11
  a6:	84 60       	ori	r24, 0x04	; 4
  a8:	8b b9       	out	0x0b, r24	; 11
	clr_bit(PORTD,clockPin);
  aa:	8b b1       	in	r24, 0x0b	; 11
  ac:	8b 7f       	andi	r24, 0xFB	; 251
  ae:	8b b9       	out	0x0b, r24	; 11
  b0:	08 95       	ret

000000b2 <escreve>:
}

void escreve(int valor) {
  b2:	0f 93       	push	r16
  b4:	1f 93       	push	r17
  b6:	cf 93       	push	r28
  b8:	df 93       	push	r29
  ba:	8c 01       	movw	r16, r24
	int i;
	for (i = 0; i < 8; i++) {
  bc:	c0 e0       	ldi	r28, 0x00	; 0
  be:	d0 e0       	ldi	r29, 0x00	; 0
  c0:	0e c0       	rjmp	.+28     	; 0xde <escreve+0x2c>
		if (valor & 0x80){
  c2:	07 ff       	sbrs	r16, 7
  c4:	04 c0       	rjmp	.+8      	; 0xce <escreve+0x1c>
			set_bit(PORTD,dataPin);
  c6:	8b b1       	in	r24, 0x0b	; 11
  c8:	80 61       	ori	r24, 0x10	; 16
  ca:	8b b9       	out	0x0b, r24	; 11
  cc:	03 c0       	rjmp	.+6      	; 0xd4 <escreve+0x22>
		}else{
			clr_bit(PORTD,dataPin);
  ce:	8b b1       	in	r24, 0x0b	; 11
  d0:	8f 7e       	andi	r24, 0xEF	; 239
  d2:	8b b9       	out	0x0b, r24	; 11
		};
		PulsaClock();
  d4:	0e 94 52 00 	call	0xa4	; 0xa4 <PulsaClock>
		valor <<= 1;
  d8:	00 0f       	add	r16, r16
  da:	11 1f       	adc	r17, r17
	clr_bit(PORTD,clockPin);
}

void escreve(int valor) {
	int i;
	for (i = 0; i < 8; i++) {
  dc:	21 96       	adiw	r28, 0x01	; 1
  de:	c8 30       	cpi	r28, 0x08	; 8
  e0:	d1 05       	cpc	r29, r1
  e2:	7c f3       	brlt	.-34     	; 0xc2 <escreve+0x10>
			clr_bit(PORTD,dataPin);
		};
		PulsaClock();
		valor <<= 1;
	}
	PulsaEn();
  e4:	0e 94 4b 00 	call	0x96	; 0x96 <PulsaEn>
}
  e8:	df 91       	pop	r29
  ea:	cf 91       	pop	r28
  ec:	1f 91       	pop	r17
  ee:	0f 91       	pop	r16
  f0:	08 95       	ret

000000f2 <main>:

int main(void){
    /* Replace with your application code */
	set_bit(DDRD,latchPin);
  f2:	8a b1       	in	r24, 0x0a	; 10
  f4:	88 60       	ori	r24, 0x08	; 8
  f6:	8a b9       	out	0x0a, r24	; 10
	set_bit(DDRD,dataPin);
  f8:	8a b1       	in	r24, 0x0a	; 10
  fa:	80 61       	ori	r24, 0x10	; 16
  fc:	8a b9       	out	0x0a, r24	; 10
	set_bit(DDRD,clockPin);
  fe:	8a b1       	in	r24, 0x0a	; 10
 100:	84 60       	ori	r24, 0x04	; 4
 102:	8a b9       	out	0x0a, r24	; 10
	DDRC = 0b00000111;
 104:	87 e0       	ldi	r24, 0x07	; 7
 106:	87 b9       	out	0x07, r24	; 7
    while (1){
		PORTC = 0b00000110;
 108:	86 e0       	ldi	r24, 0x06	; 6
 10a:	88 b9       	out	0x08, r24	; 8
		for (int i = 0; i <= 9; i++) {
 10c:	c0 e0       	ldi	r28, 0x00	; 0
 10e:	d0 e0       	ldi	r29, 0x00	; 0
 110:	13 c0       	rjmp	.+38     	; 0x138 <main+0x46>
			escreve(digito[i]);
 112:	fe 01       	movw	r30, r28
 114:	ee 0f       	add	r30, r30
 116:	ff 1f       	adc	r31, r31
 118:	e0 50       	subi	r30, 0x00	; 0
 11a:	ff 4f       	sbci	r31, 0xFF	; 255
 11c:	80 81       	ld	r24, Z
 11e:	91 81       	ldd	r25, Z+1	; 0x01
 120:	0e 94 59 00 	call	0xb2	; 0xb2 <escreve>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 124:	2f ef       	ldi	r18, 0xFF	; 255
 126:	89 e6       	ldi	r24, 0x69	; 105
 128:	98 e1       	ldi	r25, 0x18	; 24
 12a:	21 50       	subi	r18, 0x01	; 1
 12c:	80 40       	sbci	r24, 0x00	; 0
 12e:	90 40       	sbci	r25, 0x00	; 0
 130:	e1 f7       	brne	.-8      	; 0x12a <main+0x38>
 132:	00 c0       	rjmp	.+0      	; 0x134 <main+0x42>
 134:	00 00       	nop
	set_bit(DDRD,dataPin);
	set_bit(DDRD,clockPin);
	DDRC = 0b00000111;
    while (1){
		PORTC = 0b00000110;
		for (int i = 0; i <= 9; i++) {
 136:	21 96       	adiw	r28, 0x01	; 1
 138:	ca 30       	cpi	r28, 0x0A	; 10
 13a:	d1 05       	cpc	r29, r1
 13c:	54 f3       	brlt	.-44     	; 0x112 <main+0x20>
 13e:	e4 cf       	rjmp	.-56     	; 0x108 <main+0x16>

00000140 <_exit>:
 140:	f8 94       	cli

00000142 <__stop_program>:
 142:	ff cf       	rjmp	.-2      	; 0x142 <__stop_program>
