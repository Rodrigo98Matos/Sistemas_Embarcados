
Computador_de_Bordo.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002a  00800100  00000a36  00000aca  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000a36  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  0080012a  0080012a  00000af4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000af4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000b24  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b8  00000000  00000000  00000b64  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e1c  00000000  00000000  00000c1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000097f  00000000  00000000  00001a38  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000659  00000000  00000000  000023b7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001b4  00000000  00000000  00002a10  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004a1  00000000  00000000  00002bc4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000557  00000000  00000000  00003065  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000088  00000000  00000000  000035bc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__ctors_end>
   4:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
   8:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
   c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  10:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  14:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  18:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  1c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  20:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  24:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  28:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  2c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  30:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  34:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  38:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  3c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  40:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  44:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  48:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  4c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  50:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  54:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  58:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  5c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  60:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  64:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  68:	08 00       	.word	0x0008	; ????
  6a:	00 00       	nop
  6c:	be 92       	st	-X, r11
  6e:	24 49       	sbci	r18, 0x94	; 148
  70:	12 3e       	cpi	r17, 0xE2	; 226
  72:	ab aa       	std	Y+51, r10	; 0x33
  74:	aa 2a       	or	r10, r26
  76:	be cd       	rjmp	.-1156   	; 0xfffffbf4 <__eeprom_end+0xff7efbf4>
  78:	cc cc       	rjmp	.-1640   	; 0xfffffa12 <__eeprom_end+0xff7efa12>
  7a:	4c 3e       	cpi	r20, 0xEC	; 236
  7c:	00 00       	nop
  7e:	00 80       	ld	r0, Z
  80:	be ab       	std	Y+54, r27	; 0x36
  82:	aa aa       	std	Y+50, r10	; 0x32
  84:	aa 3e       	cpi	r26, 0xEA	; 234
  86:	00 00       	nop
  88:	00 00       	nop
  8a:	bf 00       	.word	0x00bf	; ????
  8c:	00 00       	nop
  8e:	80 3f       	cpi	r24, 0xF0	; 240
  90:	00 00       	nop
  92:	00 00       	nop
  94:	00 08       	sbc	r0, r0
  96:	41 78       	andi	r20, 0x81	; 129
  98:	d3 bb       	out	0x13, r29	; 19
  9a:	43 87       	std	Z+11, r20	; 0x0b
  9c:	d1 13       	cpse	r29, r17
  9e:	3d 19       	sub	r19, r13
  a0:	0e 3c       	cpi	r16, 0xCE	; 206
  a2:	c3 bd       	out	0x23, r28	; 35
  a4:	42 82       	std	Z+2, r4	; 0x02
  a6:	ad 2b       	or	r26, r29
  a8:	3e 68       	ori	r19, 0x8E	; 142
  aa:	ec 82       	std	Y+4, r14	; 0x04
  ac:	76 be       	out	0x36, r7	; 54
  ae:	d9 8f       	std	Y+25, r29	; 0x19
  b0:	e1 a9       	ldd	r30, Z+49	; 0x31
  b2:	3e 4c       	sbci	r19, 0xCE	; 206
  b4:	80 ef       	ldi	r24, 0xF0	; 240
  b6:	ff be       	out	0x3f, r15	; 63
  b8:	01 c4       	rjmp	.+2050   	; 0x8bc <__mulsf3_pse+0x54>
  ba:	ff 7f       	andi	r31, 0xFF	; 255
  bc:	3f 00       	.word	0x003f	; ????
  be:	00 00       	nop
	...

000000c2 <__ctors_end>:
  c2:	11 24       	eor	r1, r1
  c4:	1f be       	out	0x3f, r1	; 63
  c6:	cf ef       	ldi	r28, 0xFF	; 255
  c8:	d8 e0       	ldi	r29, 0x08	; 8
  ca:	de bf       	out	0x3e, r29	; 62
  cc:	cd bf       	out	0x3d, r28	; 61

000000ce <__do_copy_data>:
  ce:	11 e0       	ldi	r17, 0x01	; 1
  d0:	a0 e0       	ldi	r26, 0x00	; 0
  d2:	b1 e0       	ldi	r27, 0x01	; 1
  d4:	e6 e3       	ldi	r30, 0x36	; 54
  d6:	fa e0       	ldi	r31, 0x0A	; 10
  d8:	02 c0       	rjmp	.+4      	; 0xde <__do_copy_data+0x10>
  da:	05 90       	lpm	r0, Z+
  dc:	0d 92       	st	X+, r0
  de:	aa 32       	cpi	r26, 0x2A	; 42
  e0:	b1 07       	cpc	r27, r17
  e2:	d9 f7       	brne	.-10     	; 0xda <__do_copy_data+0xc>

000000e4 <__do_clear_bss>:
  e4:	21 e0       	ldi	r18, 0x01	; 1
  e6:	aa e2       	ldi	r26, 0x2A	; 42
  e8:	b1 e0       	ldi	r27, 0x01	; 1
  ea:	01 c0       	rjmp	.+2      	; 0xee <.do_clear_bss_start>

000000ec <.do_clear_bss_loop>:
  ec:	1d 92       	st	X+, r1

000000ee <.do_clear_bss_start>:
  ee:	ac 32       	cpi	r26, 0x2C	; 44
  f0:	b2 07       	cpc	r27, r18
  f2:	e1 f7       	brne	.-8      	; 0xec <.do_clear_bss_loop>
  f4:	0e 94 0e 01 	call	0x21c	; 0x21c <main>
  f8:	0c 94 19 05 	jmp	0xa32	; 0xa32 <_exit>

000000fc <__bad_interrupt>:
  fc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000100 <ADC_begin>:
}

double R2(unsigned char pin){				//Em um divisor de tensão com 10000 Ohm no resistor superior, retorna o valor ohmico
	float Vadc = tensao(pin);
	return Vadc * (10000/(5.0-Vadc));
}
 100:	87 e8       	ldi	r24, 0x87	; 135
 102:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 106:	81 e0       	ldi	r24, 0x01	; 1
 108:	90 e0       	ldi	r25, 0x00	; 0
 10a:	90 93 2b 01 	sts	0x012B, r25	; 0x80012b <__data_end+0x1>
 10e:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <__data_end>
 112:	08 95       	ret

00000114 <lerAnalog>:
 114:	80 5c       	subi	r24, 0xC0	; 192
 116:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
 11a:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <__data_end>
 11e:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <__data_end+0x1>
 122:	89 2b       	or	r24, r25
 124:	49 f0       	breq	.+18     	; 0x138 <lerAnalog+0x24>
 126:	ea e7       	ldi	r30, 0x7A	; 122
 128:	f0 e0       	ldi	r31, 0x00	; 0
 12a:	80 81       	ld	r24, Z
 12c:	80 64       	ori	r24, 0x40	; 64
 12e:	80 83       	st	Z, r24
 130:	10 92 2b 01 	sts	0x012B, r1	; 0x80012b <__data_end+0x1>
 134:	10 92 2a 01 	sts	0x012A, r1	; 0x80012a <__data_end>
 138:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 13c:	86 fd       	sbrc	r24, 6
 13e:	0b c0       	rjmp	.+22     	; 0x156 <lerAnalog+0x42>
 140:	81 e0       	ldi	r24, 0x01	; 1
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	90 93 2b 01 	sts	0x012B, r25	; 0x80012b <__data_end+0x1>
 148:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <__data_end>
 14c:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
 150:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 154:	08 95       	ret
 156:	08 95       	ret

00000158 <tensao>:
 158:	0e 94 8a 00 	call	0x114	; 0x114 <lerAnalog>
 15c:	bc 01       	movw	r22, r24
 15e:	99 0f       	add	r25, r25
 160:	88 0b       	sbc	r24, r24
 162:	99 0b       	sbc	r25, r25
 164:	0e 94 42 03 	call	0x684	; 0x684 <__floatsisf>
 168:	20 e0       	ldi	r18, 0x00	; 0
 16a:	30 e0       	ldi	r19, 0x00	; 0
 16c:	40 ea       	ldi	r20, 0xA0	; 160
 16e:	50 e4       	ldi	r21, 0x40	; 64
 170:	0e 94 1e 04 	call	0x83c	; 0x83c <__mulsf3>
 174:	20 e0       	ldi	r18, 0x00	; 0
 176:	30 ec       	ldi	r19, 0xC0	; 192
 178:	4f e7       	ldi	r20, 0x7F	; 127
 17a:	54 e4       	ldi	r21, 0x44	; 68
 17c:	0e 94 98 02 	call	0x530	; 0x530 <__divsf3>
 180:	08 95       	ret

00000182 <R1>:
 182:	cf 92       	push	r12
 184:	df 92       	push	r13
 186:	ef 92       	push	r14
 188:	ff 92       	push	r15
 18a:	0e 94 ac 00 	call	0x158	; 0x158 <tensao>
 18e:	6b 01       	movw	r12, r22
 190:	7c 01       	movw	r14, r24
 192:	20 e0       	ldi	r18, 0x00	; 0
 194:	30 e4       	ldi	r19, 0x40	; 64
 196:	4c e1       	ldi	r20, 0x1C	; 28
 198:	56 e4       	ldi	r21, 0x46	; 70
 19a:	0e 94 1e 04 	call	0x83c	; 0x83c <__mulsf3>
 19e:	9b 01       	movw	r18, r22
 1a0:	ac 01       	movw	r20, r24
 1a2:	60 e0       	ldi	r22, 0x00	; 0
 1a4:	70 e5       	ldi	r23, 0x50	; 80
 1a6:	83 e4       	ldi	r24, 0x43	; 67
 1a8:	97 e4       	ldi	r25, 0x47	; 71
 1aa:	0e 94 2b 02 	call	0x456	; 0x456 <__subsf3>
 1ae:	a7 01       	movw	r20, r14
 1b0:	96 01       	movw	r18, r12
 1b2:	0e 94 98 02 	call	0x530	; 0x530 <__divsf3>
 1b6:	ff 90       	pop	r15
 1b8:	ef 90       	pop	r14
 1ba:	df 90       	pop	r13
 1bc:	cf 90       	pop	r12
 1be:	08 95       	ret

000001c0 <ntc_10k>:
			T2 = 373.15,                            //Temperatura de referêcia 2
			RT1 = 35563.0,                          //Reseistência do NTC em T1
			RT2 = 549.4,                            //Resistência do NTC em T2
			beta = log(RT1/RT2)/((1/T1)-(1/T2)),    //Constante do termistor
			Rinf = Rd0*exp(-beta/T0),               //Parâmetro de resistência
			Rntc = R1(pin),							//Resistencia do NTC
 1c0:	0e 94 c1 00 	call	0x182	; 0x182 <R1>
			temp;									
	temp = beta/log(Rntc/Rinf);				//Temperatura em Kelvin
 1c4:	2c ef       	ldi	r18, 0xFC	; 252
 1c6:	38 ed       	ldi	r19, 0xD8	; 216
 1c8:	42 ed       	ldi	r20, 0xD2	; 210
 1ca:	5b e3       	ldi	r21, 0x3B	; 59
 1cc:	0e 94 98 02 	call	0x530	; 0x530 <__divsf3>
 1d0:	0e 94 d6 03 	call	0x7ac	; 0x7ac <log>
 1d4:	9b 01       	movw	r18, r22
 1d6:	ac 01       	movw	r20, r24
 1d8:	65 e6       	ldi	r22, 0x65	; 101
 1da:	74 ed       	ldi	r23, 0xD4	; 212
 1dc:	84 e8       	ldi	r24, 0x84	; 132
 1de:	95 e4       	ldi	r25, 0x45	; 69
 1e0:	0e 94 98 02 	call	0x530	; 0x530 <__divsf3>
	return temp - 273.15;					//Retorna Temperatura em Celsius
 1e4:	23 e3       	ldi	r18, 0x33	; 51
 1e6:	33 e9       	ldi	r19, 0x93	; 147
 1e8:	48 e8       	ldi	r20, 0x88	; 136
 1ea:	53 e4       	ldi	r21, 0x43	; 67
 1ec:	0e 94 2b 02 	call	0x456	; 0x456 <__subsf3>
 1f0:	08 95       	ret

000001f2 <bat2>:
#include "USART.h"
#include "ADC.h"



double bat2(unsigned char pin, double b1){
 1f2:	cf 92       	push	r12
 1f4:	df 92       	push	r13
 1f6:	ef 92       	push	r14
 1f8:	ff 92       	push	r15
 1fa:	6a 01       	movw	r12, r20
 1fc:	7b 01       	movw	r14, r22
	return (tensao(pin)/(0.5))-b1; //tensão/(R1/(R1+R2)) retorna a tensão de entrada do divisor de tensão menos a tensão da primeira bateria
 1fe:	0e 94 ac 00 	call	0x158	; 0x158 <tensao>
 202:	9b 01       	movw	r18, r22
 204:	ac 01       	movw	r20, r24
 206:	0e 94 2c 02 	call	0x458	; 0x458 <__addsf3>
 20a:	a7 01       	movw	r20, r14
 20c:	96 01       	movw	r18, r12
 20e:	0e 94 2b 02 	call	0x456	; 0x456 <__subsf3>
}
 212:	ff 90       	pop	r15
 214:	ef 90       	pop	r14
 216:	df 90       	pop	r13
 218:	cf 90       	pop	r12
 21a:	08 95       	ret

0000021c <main>:

int main(void)
{
 21c:	cf 93       	push	r28
 21e:	df 93       	push	r29
 220:	cd b7       	in	r28, 0x3d	; 61
 222:	de b7       	in	r29, 0x3e	; 62
 224:	ab 97       	sbiw	r28, 0x2b	; 43
 226:	0f b6       	in	r0, 0x3f	; 63
 228:	f8 94       	cli
 22a:	de bf       	out	0x3e, r29	; 62
 22c:	0f be       	out	0x3f, r0	; 63
 22e:	cd bf       	out	0x3d, r28	; 61
	ADC_begin();
 230:	0e 94 80 00 	call	0x100	; 0x100 <ADC_begin>
	USART_Inic(9600);
 234:	80 e8       	ldi	r24, 0x80	; 128
 236:	95 e2       	ldi	r25, 0x25	; 37
 238:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <USART_Inic>
    while (1) 
    {
		char t1[] = "Temperatura:  ";
 23c:	8f e0       	ldi	r24, 0x0F	; 15
 23e:	e0 e0       	ldi	r30, 0x00	; 0
 240:	f1 e0       	ldi	r31, 0x01	; 1
 242:	de 01       	movw	r26, r28
 244:	11 96       	adiw	r26, 0x01	; 1
 246:	01 90       	ld	r0, Z+
 248:	0d 92       	st	X+, r0
 24a:	8a 95       	dec	r24
 24c:	e1 f7       	brne	.-8      	; 0x246 <main+0x2a>
		char b1[] = "\tBateria1:  ";
 24e:	8d e0       	ldi	r24, 0x0D	; 13
 250:	ef e0       	ldi	r30, 0x0F	; 15
 252:	f1 e0       	ldi	r31, 0x01	; 1
 254:	de 01       	movw	r26, r28
 256:	5d 96       	adiw	r26, 0x1d	; 29
 258:	01 90       	ld	r0, Z+
 25a:	0d 92       	st	X+, r0
 25c:	8a 95       	dec	r24
 25e:	e1 f7       	brne	.-8      	; 0x258 <main+0x3c>
		char b2[] = "\tBateria2:  ";
 260:	8d e0       	ldi	r24, 0x0D	; 13
 262:	ec e1       	ldi	r30, 0x1C	; 28
 264:	f1 e0       	ldi	r31, 0x01	; 1
 266:	de 01       	movw	r26, r28
 268:	50 96       	adiw	r26, 0x10	; 16
 26a:	01 90       	ld	r0, Z+
 26c:	0d 92       	st	X+, r0
 26e:	8a 95       	dec	r24
 270:	e1 f7       	brne	.-8      	; 0x26a <main+0x4e>
		char fim[] = "\n";
 272:	8a e0       	ldi	r24, 0x0A	; 10
 274:	90 e0       	ldi	r25, 0x00	; 0
 276:	9b a7       	std	Y+43, r25	; 0x2b
 278:	8a a7       	std	Y+42, r24	; 0x2a
		double bateria1 = tensao(1);
 27a:	81 e0       	ldi	r24, 0x01	; 1
 27c:	0e 94 ac 00 	call	0x158	; 0x158 <tensao>
 280:	6b 01       	movw	r12, r22
 282:	7c 01       	movw	r14, r24
		escreve_USART(t1);
 284:	ce 01       	movw	r24, r28
 286:	01 96       	adiw	r24, 0x01	; 1
 288:	0e 94 8b 01 	call	0x316	; 0x316 <escreve_USART>
		envia_double(ntc_10k(3));
 28c:	83 e0       	ldi	r24, 0x03	; 3
 28e:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <ntc_10k>
 292:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <envia_double>
		escreve_USART(b1);	envia_double(bateria1);
 296:	ce 01       	movw	r24, r28
 298:	4d 96       	adiw	r24, 0x1d	; 29
 29a:	0e 94 8b 01 	call	0x316	; 0x316 <escreve_USART>
 29e:	c7 01       	movw	r24, r14
 2a0:	b6 01       	movw	r22, r12
 2a2:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <envia_double>
		escreve_USART(b2);	envia_double(bat2(6, bateria1));
 2a6:	ce 01       	movw	r24, r28
 2a8:	40 96       	adiw	r24, 0x10	; 16
 2aa:	0e 94 8b 01 	call	0x316	; 0x316 <escreve_USART>
 2ae:	b7 01       	movw	r22, r14
 2b0:	a6 01       	movw	r20, r12
 2b2:	86 e0       	ldi	r24, 0x06	; 6
 2b4:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <bat2>
 2b8:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <envia_double>
		escreve_USART(fim);
 2bc:	ce 01       	movw	r24, r28
 2be:	8a 96       	adiw	r24, 0x2a	; 42
 2c0:	0e 94 8b 01 	call	0x316	; 0x316 <escreve_USART>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2c4:	2f ef       	ldi	r18, 0xFF	; 255
 2c6:	83 ed       	ldi	r24, 0xD3	; 211
 2c8:	90 e3       	ldi	r25, 0x30	; 48
 2ca:	21 50       	subi	r18, 0x01	; 1
 2cc:	80 40       	sbci	r24, 0x00	; 0
 2ce:	90 40       	sbci	r25, 0x00	; 0
 2d0:	e1 f7       	brne	.-8      	; 0x2ca <main+0xae>
 2d2:	00 c0       	rjmp	.+0      	; 0x2d4 <main+0xb8>
 2d4:	00 00       	nop
 2d6:	b2 cf       	rjmp	.-156    	; 0x23c <main+0x20>

000002d8 <USART_Inic>:
//------------------------------------------------------------------------------------
unsigned char USART_Recebe()
{
	while (!(UCSR0A & (1<<RXC0))); //espera o dado ser recebido
	return UDR0; //retorna o dado recebido
}
 2d8:	9c 01       	movw	r18, r24
 2da:	40 e0       	ldi	r20, 0x00	; 0
 2dc:	50 e0       	ldi	r21, 0x00	; 0
 2de:	60 e4       	ldi	r22, 0x40	; 64
 2e0:	72 e4       	ldi	r23, 0x42	; 66
 2e2:	8f e0       	ldi	r24, 0x0F	; 15
 2e4:	90 e0       	ldi	r25, 0x00	; 0
 2e6:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <__udivmodsi4>
 2ea:	21 50       	subi	r18, 0x01	; 1
 2ec:	31 09       	sbc	r19, r1
 2ee:	30 93 c5 00 	sts	0x00C5, r19	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 2f2:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 2f6:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 2fa:	88 e1       	ldi	r24, 0x18	; 24
 2fc:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
 300:	86 e0       	ldi	r24, 0x06	; 6
 302:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 306:	08 95       	ret

00000308 <USART_Transmite>:
 308:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 30c:	95 ff       	sbrs	r25, 5
 30e:	fc cf       	rjmp	.-8      	; 0x308 <USART_Transmite>
 310:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 314:	08 95       	ret

00000316 <escreve_USART>:
//------------------------------------------------------------------------------------
void escreve_USART(char *c) //escreve String (RAM)
{
 316:	cf 93       	push	r28
 318:	df 93       	push	r29
 31a:	ec 01       	movw	r28, r24
	for (; *c!=0;c++) USART_Transmite(*c);
 31c:	03 c0       	rjmp	.+6      	; 0x324 <escreve_USART+0xe>
 31e:	0e 94 84 01 	call	0x308	; 0x308 <USART_Transmite>
 322:	21 96       	adiw	r28, 0x01	; 1
 324:	88 81       	ld	r24, Y
 326:	81 11       	cpse	r24, r1
 328:	fa cf       	rjmp	.-12     	; 0x31e <escreve_USART+0x8>
}
 32a:	df 91       	pop	r29
 32c:	cf 91       	pop	r28
 32e:	08 95       	ret

00000330 <envia_int>:
//------------------------------------------------------------------------------------
//Conversão de um número em seus digitos individuais
//------------------------------------------------------------------------------------
void envia_int(unsigned int valor)
{
 330:	1f 93       	push	r17
 332:	cf 93       	push	r28
 334:	df 93       	push	r29
 336:	cd b7       	in	r28, 0x3d	; 61
 338:	de b7       	in	r29, 0x3e	; 62
 33a:	28 97       	sbiw	r28, 0x08	; 8
 33c:	0f b6       	in	r0, 0x3f	; 63
 33e:	f8 94       	cli
 340:	de bf       	out	0x3e, r29	; 62
 342:	0f be       	out	0x3f, r0	; 63
 344:	cd bf       	out	0x3d, r28	; 61
 346:	ac 01       	movw	r20, r24
	unsigned char disp[tam];
	unsigned char n;
	for(n=0; n<tam; n++)
 348:	80 e0       	ldi	r24, 0x00	; 0
 34a:	08 c0       	rjmp	.+16     	; 0x35c <envia_int+0x2c>
	disp[n] = 0; //limpa vetor para armazenagem dos digitos
 34c:	e1 e0       	ldi	r30, 0x01	; 1
 34e:	f0 e0       	ldi	r31, 0x00	; 0
 350:	ec 0f       	add	r30, r28
 352:	fd 1f       	adc	r31, r29
 354:	e8 0f       	add	r30, r24
 356:	f1 1d       	adc	r31, r1
 358:	10 82       	st	Z, r1
//------------------------------------------------------------------------------------
void envia_int(unsigned int valor)
{
	unsigned char disp[tam];
	unsigned char n;
	for(n=0; n<tam; n++)
 35a:	8f 5f       	subi	r24, 0xFF	; 255
 35c:	88 30       	cpi	r24, 0x08	; 8
 35e:	b0 f3       	brcs	.-20     	; 0x34c <envia_int+0x1c>
 360:	10 e0       	ldi	r17, 0x00	; 0
	disp[n] = 0; //limpa vetor para armazenagem dos digitos
	n=0;
	do
	{
		disp[n] = (valor%10) + '0'; //pega o resto da divisão por 10
 362:	9a 01       	movw	r18, r20
 364:	ad ec       	ldi	r26, 0xCD	; 205
 366:	bc ec       	ldi	r27, 0xCC	; 204
 368:	0e 94 f6 04 	call	0x9ec	; 0x9ec <__umulhisi3>
 36c:	96 95       	lsr	r25
 36e:	87 95       	ror	r24
 370:	96 95       	lsr	r25
 372:	87 95       	ror	r24
 374:	96 95       	lsr	r25
 376:	87 95       	ror	r24
 378:	9c 01       	movw	r18, r24
 37a:	22 0f       	add	r18, r18
 37c:	33 1f       	adc	r19, r19
 37e:	88 0f       	add	r24, r24
 380:	99 1f       	adc	r25, r25
 382:	88 0f       	add	r24, r24
 384:	99 1f       	adc	r25, r25
 386:	88 0f       	add	r24, r24
 388:	99 1f       	adc	r25, r25
 38a:	82 0f       	add	r24, r18
 38c:	93 1f       	adc	r25, r19
 38e:	9a 01       	movw	r18, r20
 390:	28 1b       	sub	r18, r24
 392:	39 0b       	sbc	r19, r25
 394:	c9 01       	movw	r24, r18
 396:	e1 e0       	ldi	r30, 0x01	; 1
 398:	f0 e0       	ldi	r31, 0x00	; 0
 39a:	ec 0f       	add	r30, r28
 39c:	fd 1f       	adc	r31, r29
 39e:	e1 0f       	add	r30, r17
 3a0:	f1 1d       	adc	r31, r1
 3a2:	80 5d       	subi	r24, 0xD0	; 208
 3a4:	80 83       	st	Z, r24
		valor /=10; //pega o inteiro da divisão por 10
 3a6:	9a 01       	movw	r18, r20
 3a8:	0e 94 f6 04 	call	0x9ec	; 0x9ec <__umulhisi3>
 3ac:	ac 01       	movw	r20, r24
 3ae:	56 95       	lsr	r21
 3b0:	47 95       	ror	r20
 3b2:	56 95       	lsr	r21
 3b4:	47 95       	ror	r20
 3b6:	56 95       	lsr	r21
 3b8:	47 95       	ror	r20
		n++;
 3ba:	1f 5f       	subi	r17, 0xFF	; 255
	}while (valor!=0);
 3bc:	41 15       	cp	r20, r1
 3be:	51 05       	cpc	r21, r1
 3c0:	81 f6       	brne	.-96     	; 0x362 <envia_int+0x32>
 3c2:	0d c0       	rjmp	.+26     	; 0x3de <envia_int+0xae>
	for(;n!=0;n--){
		USART_Transmite(disp[n-1]);
 3c4:	e1 2f       	mov	r30, r17
 3c6:	f0 e0       	ldi	r31, 0x00	; 0
 3c8:	31 97       	sbiw	r30, 0x01	; 1
 3ca:	81 e0       	ldi	r24, 0x01	; 1
 3cc:	90 e0       	ldi	r25, 0x00	; 0
 3ce:	8c 0f       	add	r24, r28
 3d0:	9d 1f       	adc	r25, r29
 3d2:	e8 0f       	add	r30, r24
 3d4:	f9 1f       	adc	r31, r25
 3d6:	80 81       	ld	r24, Z
 3d8:	0e 94 84 01 	call	0x308	; 0x308 <USART_Transmite>
	{
		disp[n] = (valor%10) + '0'; //pega o resto da divisão por 10
		valor /=10; //pega o inteiro da divisão por 10
		n++;
	}while (valor!=0);
	for(;n!=0;n--){
 3dc:	11 50       	subi	r17, 0x01	; 1
 3de:	11 11       	cpse	r17, r1
 3e0:	f1 cf       	rjmp	.-30     	; 0x3c4 <envia_int+0x94>
		USART_Transmite(disp[n-1]);
	}
}
 3e2:	28 96       	adiw	r28, 0x08	; 8
 3e4:	0f b6       	in	r0, 0x3f	; 63
 3e6:	f8 94       	cli
 3e8:	de bf       	out	0x3e, r29	; 62
 3ea:	0f be       	out	0x3f, r0	; 63
 3ec:	cd bf       	out	0x3d, r28	; 61
 3ee:	df 91       	pop	r29
 3f0:	cf 91       	pop	r28
 3f2:	1f 91       	pop	r17
 3f4:	08 95       	ret

000003f6 <envia_double>:

void envia_double(double n){
 3f6:	8f 92       	push	r8
 3f8:	9f 92       	push	r9
 3fa:	af 92       	push	r10
 3fc:	bf 92       	push	r11
 3fe:	cf 92       	push	r12
 400:	df 92       	push	r13
 402:	ef 92       	push	r14
 404:	ff 92       	push	r15
 406:	6b 01       	movw	r12, r22
 408:	7c 01       	movw	r14, r24
	int i;
	int dec;
	i = n/1;
 40a:	0e 94 0a 03 	call	0x614	; 0x614 <__fixsfsi>
 40e:	4b 01       	movw	r8, r22
 410:	5c 01       	movw	r10, r24
	dec = n*100;dec = dec%100;
 412:	20 e0       	ldi	r18, 0x00	; 0
 414:	30 e0       	ldi	r19, 0x00	; 0
 416:	48 ec       	ldi	r20, 0xC8	; 200
 418:	52 e4       	ldi	r21, 0x42	; 66
 41a:	c7 01       	movw	r24, r14
 41c:	b6 01       	movw	r22, r12
 41e:	0e 94 1e 04 	call	0x83c	; 0x83c <__mulsf3>
 422:	0e 94 0a 03 	call	0x614	; 0x614 <__fixsfsi>
 426:	cb 01       	movw	r24, r22
 428:	64 e6       	ldi	r22, 0x64	; 100
 42a:	70 e0       	ldi	r23, 0x00	; 0
 42c:	0e 94 c0 04 	call	0x980	; 0x980 <__divmodhi4>
 430:	7c 01       	movw	r14, r24
	envia_int(i);
 432:	c4 01       	movw	r24, r8
 434:	0e 94 98 01 	call	0x330	; 0x330 <envia_int>
	USART_Transmite('.');
 438:	8e e2       	ldi	r24, 0x2E	; 46
 43a:	0e 94 84 01 	call	0x308	; 0x308 <USART_Transmite>
	envia_int(dec);
 43e:	c7 01       	movw	r24, r14
 440:	0e 94 98 01 	call	0x330	; 0x330 <envia_int>
}
 444:	ff 90       	pop	r15
 446:	ef 90       	pop	r14
 448:	df 90       	pop	r13
 44a:	cf 90       	pop	r12
 44c:	bf 90       	pop	r11
 44e:	af 90       	pop	r10
 450:	9f 90       	pop	r9
 452:	8f 90       	pop	r8
 454:	08 95       	ret

00000456 <__subsf3>:
 456:	50 58       	subi	r21, 0x80	; 128

00000458 <__addsf3>:
 458:	bb 27       	eor	r27, r27
 45a:	aa 27       	eor	r26, r26
 45c:	0e 94 43 02 	call	0x486	; 0x486 <__addsf3x>
 460:	0c 94 94 03 	jmp	0x728	; 0x728 <__fp_round>
 464:	0e 94 86 03 	call	0x70c	; 0x70c <__fp_pscA>
 468:	38 f0       	brcs	.+14     	; 0x478 <__addsf3+0x20>
 46a:	0e 94 8d 03 	call	0x71a	; 0x71a <__fp_pscB>
 46e:	20 f0       	brcs	.+8      	; 0x478 <__addsf3+0x20>
 470:	39 f4       	brne	.+14     	; 0x480 <__addsf3+0x28>
 472:	9f 3f       	cpi	r25, 0xFF	; 255
 474:	19 f4       	brne	.+6      	; 0x47c <__addsf3+0x24>
 476:	26 f4       	brtc	.+8      	; 0x480 <__addsf3+0x28>
 478:	0c 94 83 03 	jmp	0x706	; 0x706 <__fp_nan>
 47c:	0e f4       	brtc	.+2      	; 0x480 <__addsf3+0x28>
 47e:	e0 95       	com	r30
 480:	e7 fb       	bst	r30, 7
 482:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__fp_inf>

00000486 <__addsf3x>:
 486:	e9 2f       	mov	r30, r25
 488:	0e 94 a5 03 	call	0x74a	; 0x74a <__fp_split3>
 48c:	58 f3       	brcs	.-42     	; 0x464 <__addsf3+0xc>
 48e:	ba 17       	cp	r27, r26
 490:	62 07       	cpc	r22, r18
 492:	73 07       	cpc	r23, r19
 494:	84 07       	cpc	r24, r20
 496:	95 07       	cpc	r25, r21
 498:	20 f0       	brcs	.+8      	; 0x4a2 <__addsf3x+0x1c>
 49a:	79 f4       	brne	.+30     	; 0x4ba <__addsf3x+0x34>
 49c:	a6 f5       	brtc	.+104    	; 0x506 <__addsf3x+0x80>
 49e:	0c 94 c7 03 	jmp	0x78e	; 0x78e <__fp_zero>
 4a2:	0e f4       	brtc	.+2      	; 0x4a6 <__addsf3x+0x20>
 4a4:	e0 95       	com	r30
 4a6:	0b 2e       	mov	r0, r27
 4a8:	ba 2f       	mov	r27, r26
 4aa:	a0 2d       	mov	r26, r0
 4ac:	0b 01       	movw	r0, r22
 4ae:	b9 01       	movw	r22, r18
 4b0:	90 01       	movw	r18, r0
 4b2:	0c 01       	movw	r0, r24
 4b4:	ca 01       	movw	r24, r20
 4b6:	a0 01       	movw	r20, r0
 4b8:	11 24       	eor	r1, r1
 4ba:	ff 27       	eor	r31, r31
 4bc:	59 1b       	sub	r21, r25
 4be:	99 f0       	breq	.+38     	; 0x4e6 <__addsf3x+0x60>
 4c0:	59 3f       	cpi	r21, 0xF9	; 249
 4c2:	50 f4       	brcc	.+20     	; 0x4d8 <__addsf3x+0x52>
 4c4:	50 3e       	cpi	r21, 0xE0	; 224
 4c6:	68 f1       	brcs	.+90     	; 0x522 <__addsf3x+0x9c>
 4c8:	1a 16       	cp	r1, r26
 4ca:	f0 40       	sbci	r31, 0x00	; 0
 4cc:	a2 2f       	mov	r26, r18
 4ce:	23 2f       	mov	r18, r19
 4d0:	34 2f       	mov	r19, r20
 4d2:	44 27       	eor	r20, r20
 4d4:	58 5f       	subi	r21, 0xF8	; 248
 4d6:	f3 cf       	rjmp	.-26     	; 0x4be <__addsf3x+0x38>
 4d8:	46 95       	lsr	r20
 4da:	37 95       	ror	r19
 4dc:	27 95       	ror	r18
 4de:	a7 95       	ror	r26
 4e0:	f0 40       	sbci	r31, 0x00	; 0
 4e2:	53 95       	inc	r21
 4e4:	c9 f7       	brne	.-14     	; 0x4d8 <__addsf3x+0x52>
 4e6:	7e f4       	brtc	.+30     	; 0x506 <__addsf3x+0x80>
 4e8:	1f 16       	cp	r1, r31
 4ea:	ba 0b       	sbc	r27, r26
 4ec:	62 0b       	sbc	r22, r18
 4ee:	73 0b       	sbc	r23, r19
 4f0:	84 0b       	sbc	r24, r20
 4f2:	ba f0       	brmi	.+46     	; 0x522 <__addsf3x+0x9c>
 4f4:	91 50       	subi	r25, 0x01	; 1
 4f6:	a1 f0       	breq	.+40     	; 0x520 <__addsf3x+0x9a>
 4f8:	ff 0f       	add	r31, r31
 4fa:	bb 1f       	adc	r27, r27
 4fc:	66 1f       	adc	r22, r22
 4fe:	77 1f       	adc	r23, r23
 500:	88 1f       	adc	r24, r24
 502:	c2 f7       	brpl	.-16     	; 0x4f4 <__addsf3x+0x6e>
 504:	0e c0       	rjmp	.+28     	; 0x522 <__addsf3x+0x9c>
 506:	ba 0f       	add	r27, r26
 508:	62 1f       	adc	r22, r18
 50a:	73 1f       	adc	r23, r19
 50c:	84 1f       	adc	r24, r20
 50e:	48 f4       	brcc	.+18     	; 0x522 <__addsf3x+0x9c>
 510:	87 95       	ror	r24
 512:	77 95       	ror	r23
 514:	67 95       	ror	r22
 516:	b7 95       	ror	r27
 518:	f7 95       	ror	r31
 51a:	9e 3f       	cpi	r25, 0xFE	; 254
 51c:	08 f0       	brcs	.+2      	; 0x520 <__addsf3x+0x9a>
 51e:	b0 cf       	rjmp	.-160    	; 0x480 <__addsf3+0x28>
 520:	93 95       	inc	r25
 522:	88 0f       	add	r24, r24
 524:	08 f0       	brcs	.+2      	; 0x528 <__addsf3x+0xa2>
 526:	99 27       	eor	r25, r25
 528:	ee 0f       	add	r30, r30
 52a:	97 95       	ror	r25
 52c:	87 95       	ror	r24
 52e:	08 95       	ret

00000530 <__divsf3>:
 530:	0e 94 ac 02 	call	0x558	; 0x558 <__divsf3x>
 534:	0c 94 94 03 	jmp	0x728	; 0x728 <__fp_round>
 538:	0e 94 8d 03 	call	0x71a	; 0x71a <__fp_pscB>
 53c:	58 f0       	brcs	.+22     	; 0x554 <__divsf3+0x24>
 53e:	0e 94 86 03 	call	0x70c	; 0x70c <__fp_pscA>
 542:	40 f0       	brcs	.+16     	; 0x554 <__divsf3+0x24>
 544:	29 f4       	brne	.+10     	; 0x550 <__divsf3+0x20>
 546:	5f 3f       	cpi	r21, 0xFF	; 255
 548:	29 f0       	breq	.+10     	; 0x554 <__divsf3+0x24>
 54a:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__fp_inf>
 54e:	51 11       	cpse	r21, r1
 550:	0c 94 c8 03 	jmp	0x790	; 0x790 <__fp_szero>
 554:	0c 94 83 03 	jmp	0x706	; 0x706 <__fp_nan>

00000558 <__divsf3x>:
 558:	0e 94 a5 03 	call	0x74a	; 0x74a <__fp_split3>
 55c:	68 f3       	brcs	.-38     	; 0x538 <__divsf3+0x8>

0000055e <__divsf3_pse>:
 55e:	99 23       	and	r25, r25
 560:	b1 f3       	breq	.-20     	; 0x54e <__divsf3+0x1e>
 562:	55 23       	and	r21, r21
 564:	91 f3       	breq	.-28     	; 0x54a <__divsf3+0x1a>
 566:	95 1b       	sub	r25, r21
 568:	55 0b       	sbc	r21, r21
 56a:	bb 27       	eor	r27, r27
 56c:	aa 27       	eor	r26, r26
 56e:	62 17       	cp	r22, r18
 570:	73 07       	cpc	r23, r19
 572:	84 07       	cpc	r24, r20
 574:	38 f0       	brcs	.+14     	; 0x584 <__divsf3_pse+0x26>
 576:	9f 5f       	subi	r25, 0xFF	; 255
 578:	5f 4f       	sbci	r21, 0xFF	; 255
 57a:	22 0f       	add	r18, r18
 57c:	33 1f       	adc	r19, r19
 57e:	44 1f       	adc	r20, r20
 580:	aa 1f       	adc	r26, r26
 582:	a9 f3       	breq	.-22     	; 0x56e <__divsf3_pse+0x10>
 584:	35 d0       	rcall	.+106    	; 0x5f0 <__divsf3_pse+0x92>
 586:	0e 2e       	mov	r0, r30
 588:	3a f0       	brmi	.+14     	; 0x598 <__divsf3_pse+0x3a>
 58a:	e0 e8       	ldi	r30, 0x80	; 128
 58c:	32 d0       	rcall	.+100    	; 0x5f2 <__divsf3_pse+0x94>
 58e:	91 50       	subi	r25, 0x01	; 1
 590:	50 40       	sbci	r21, 0x00	; 0
 592:	e6 95       	lsr	r30
 594:	00 1c       	adc	r0, r0
 596:	ca f7       	brpl	.-14     	; 0x58a <__divsf3_pse+0x2c>
 598:	2b d0       	rcall	.+86     	; 0x5f0 <__divsf3_pse+0x92>
 59a:	fe 2f       	mov	r31, r30
 59c:	29 d0       	rcall	.+82     	; 0x5f0 <__divsf3_pse+0x92>
 59e:	66 0f       	add	r22, r22
 5a0:	77 1f       	adc	r23, r23
 5a2:	88 1f       	adc	r24, r24
 5a4:	bb 1f       	adc	r27, r27
 5a6:	26 17       	cp	r18, r22
 5a8:	37 07       	cpc	r19, r23
 5aa:	48 07       	cpc	r20, r24
 5ac:	ab 07       	cpc	r26, r27
 5ae:	b0 e8       	ldi	r27, 0x80	; 128
 5b0:	09 f0       	breq	.+2      	; 0x5b4 <__divsf3_pse+0x56>
 5b2:	bb 0b       	sbc	r27, r27
 5b4:	80 2d       	mov	r24, r0
 5b6:	bf 01       	movw	r22, r30
 5b8:	ff 27       	eor	r31, r31
 5ba:	93 58       	subi	r25, 0x83	; 131
 5bc:	5f 4f       	sbci	r21, 0xFF	; 255
 5be:	3a f0       	brmi	.+14     	; 0x5ce <__divsf3_pse+0x70>
 5c0:	9e 3f       	cpi	r25, 0xFE	; 254
 5c2:	51 05       	cpc	r21, r1
 5c4:	78 f0       	brcs	.+30     	; 0x5e4 <__divsf3_pse+0x86>
 5c6:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__fp_inf>
 5ca:	0c 94 c8 03 	jmp	0x790	; 0x790 <__fp_szero>
 5ce:	5f 3f       	cpi	r21, 0xFF	; 255
 5d0:	e4 f3       	brlt	.-8      	; 0x5ca <__divsf3_pse+0x6c>
 5d2:	98 3e       	cpi	r25, 0xE8	; 232
 5d4:	d4 f3       	brlt	.-12     	; 0x5ca <__divsf3_pse+0x6c>
 5d6:	86 95       	lsr	r24
 5d8:	77 95       	ror	r23
 5da:	67 95       	ror	r22
 5dc:	b7 95       	ror	r27
 5de:	f7 95       	ror	r31
 5e0:	9f 5f       	subi	r25, 0xFF	; 255
 5e2:	c9 f7       	brne	.-14     	; 0x5d6 <__divsf3_pse+0x78>
 5e4:	88 0f       	add	r24, r24
 5e6:	91 1d       	adc	r25, r1
 5e8:	96 95       	lsr	r25
 5ea:	87 95       	ror	r24
 5ec:	97 f9       	bld	r25, 7
 5ee:	08 95       	ret
 5f0:	e1 e0       	ldi	r30, 0x01	; 1
 5f2:	66 0f       	add	r22, r22
 5f4:	77 1f       	adc	r23, r23
 5f6:	88 1f       	adc	r24, r24
 5f8:	bb 1f       	adc	r27, r27
 5fa:	62 17       	cp	r22, r18
 5fc:	73 07       	cpc	r23, r19
 5fe:	84 07       	cpc	r24, r20
 600:	ba 07       	cpc	r27, r26
 602:	20 f0       	brcs	.+8      	; 0x60c <__divsf3_pse+0xae>
 604:	62 1b       	sub	r22, r18
 606:	73 0b       	sbc	r23, r19
 608:	84 0b       	sbc	r24, r20
 60a:	ba 0b       	sbc	r27, r26
 60c:	ee 1f       	adc	r30, r30
 60e:	88 f7       	brcc	.-30     	; 0x5f2 <__divsf3_pse+0x94>
 610:	e0 95       	com	r30
 612:	08 95       	ret

00000614 <__fixsfsi>:
 614:	0e 94 11 03 	call	0x622	; 0x622 <__fixunssfsi>
 618:	68 94       	set
 61a:	b1 11       	cpse	r27, r1
 61c:	0c 94 c8 03 	jmp	0x790	; 0x790 <__fp_szero>
 620:	08 95       	ret

00000622 <__fixunssfsi>:
 622:	0e 94 ad 03 	call	0x75a	; 0x75a <__fp_splitA>
 626:	88 f0       	brcs	.+34     	; 0x64a <__fixunssfsi+0x28>
 628:	9f 57       	subi	r25, 0x7F	; 127
 62a:	98 f0       	brcs	.+38     	; 0x652 <__fixunssfsi+0x30>
 62c:	b9 2f       	mov	r27, r25
 62e:	99 27       	eor	r25, r25
 630:	b7 51       	subi	r27, 0x17	; 23
 632:	b0 f0       	brcs	.+44     	; 0x660 <__fixunssfsi+0x3e>
 634:	e1 f0       	breq	.+56     	; 0x66e <__fixunssfsi+0x4c>
 636:	66 0f       	add	r22, r22
 638:	77 1f       	adc	r23, r23
 63a:	88 1f       	adc	r24, r24
 63c:	99 1f       	adc	r25, r25
 63e:	1a f0       	brmi	.+6      	; 0x646 <__fixunssfsi+0x24>
 640:	ba 95       	dec	r27
 642:	c9 f7       	brne	.-14     	; 0x636 <__fixunssfsi+0x14>
 644:	14 c0       	rjmp	.+40     	; 0x66e <__fixunssfsi+0x4c>
 646:	b1 30       	cpi	r27, 0x01	; 1
 648:	91 f0       	breq	.+36     	; 0x66e <__fixunssfsi+0x4c>
 64a:	0e 94 c7 03 	call	0x78e	; 0x78e <__fp_zero>
 64e:	b1 e0       	ldi	r27, 0x01	; 1
 650:	08 95       	ret
 652:	0c 94 c7 03 	jmp	0x78e	; 0x78e <__fp_zero>
 656:	67 2f       	mov	r22, r23
 658:	78 2f       	mov	r23, r24
 65a:	88 27       	eor	r24, r24
 65c:	b8 5f       	subi	r27, 0xF8	; 248
 65e:	39 f0       	breq	.+14     	; 0x66e <__fixunssfsi+0x4c>
 660:	b9 3f       	cpi	r27, 0xF9	; 249
 662:	cc f3       	brlt	.-14     	; 0x656 <__fixunssfsi+0x34>
 664:	86 95       	lsr	r24
 666:	77 95       	ror	r23
 668:	67 95       	ror	r22
 66a:	b3 95       	inc	r27
 66c:	d9 f7       	brne	.-10     	; 0x664 <__fixunssfsi+0x42>
 66e:	3e f4       	brtc	.+14     	; 0x67e <__fixunssfsi+0x5c>
 670:	90 95       	com	r25
 672:	80 95       	com	r24
 674:	70 95       	com	r23
 676:	61 95       	neg	r22
 678:	7f 4f       	sbci	r23, 0xFF	; 255
 67a:	8f 4f       	sbci	r24, 0xFF	; 255
 67c:	9f 4f       	sbci	r25, 0xFF	; 255
 67e:	08 95       	ret

00000680 <__floatunsisf>:
 680:	e8 94       	clt
 682:	09 c0       	rjmp	.+18     	; 0x696 <__floatsisf+0x12>

00000684 <__floatsisf>:
 684:	97 fb       	bst	r25, 7
 686:	3e f4       	brtc	.+14     	; 0x696 <__floatsisf+0x12>
 688:	90 95       	com	r25
 68a:	80 95       	com	r24
 68c:	70 95       	com	r23
 68e:	61 95       	neg	r22
 690:	7f 4f       	sbci	r23, 0xFF	; 255
 692:	8f 4f       	sbci	r24, 0xFF	; 255
 694:	9f 4f       	sbci	r25, 0xFF	; 255
 696:	99 23       	and	r25, r25
 698:	a9 f0       	breq	.+42     	; 0x6c4 <__floatsisf+0x40>
 69a:	f9 2f       	mov	r31, r25
 69c:	96 e9       	ldi	r25, 0x96	; 150
 69e:	bb 27       	eor	r27, r27
 6a0:	93 95       	inc	r25
 6a2:	f6 95       	lsr	r31
 6a4:	87 95       	ror	r24
 6a6:	77 95       	ror	r23
 6a8:	67 95       	ror	r22
 6aa:	b7 95       	ror	r27
 6ac:	f1 11       	cpse	r31, r1
 6ae:	f8 cf       	rjmp	.-16     	; 0x6a0 <__floatsisf+0x1c>
 6b0:	fa f4       	brpl	.+62     	; 0x6f0 <__floatsisf+0x6c>
 6b2:	bb 0f       	add	r27, r27
 6b4:	11 f4       	brne	.+4      	; 0x6ba <__floatsisf+0x36>
 6b6:	60 ff       	sbrs	r22, 0
 6b8:	1b c0       	rjmp	.+54     	; 0x6f0 <__floatsisf+0x6c>
 6ba:	6f 5f       	subi	r22, 0xFF	; 255
 6bc:	7f 4f       	sbci	r23, 0xFF	; 255
 6be:	8f 4f       	sbci	r24, 0xFF	; 255
 6c0:	9f 4f       	sbci	r25, 0xFF	; 255
 6c2:	16 c0       	rjmp	.+44     	; 0x6f0 <__floatsisf+0x6c>
 6c4:	88 23       	and	r24, r24
 6c6:	11 f0       	breq	.+4      	; 0x6cc <__floatsisf+0x48>
 6c8:	96 e9       	ldi	r25, 0x96	; 150
 6ca:	11 c0       	rjmp	.+34     	; 0x6ee <__floatsisf+0x6a>
 6cc:	77 23       	and	r23, r23
 6ce:	21 f0       	breq	.+8      	; 0x6d8 <__floatsisf+0x54>
 6d0:	9e e8       	ldi	r25, 0x8E	; 142
 6d2:	87 2f       	mov	r24, r23
 6d4:	76 2f       	mov	r23, r22
 6d6:	05 c0       	rjmp	.+10     	; 0x6e2 <__floatsisf+0x5e>
 6d8:	66 23       	and	r22, r22
 6da:	71 f0       	breq	.+28     	; 0x6f8 <__floatsisf+0x74>
 6dc:	96 e8       	ldi	r25, 0x86	; 134
 6de:	86 2f       	mov	r24, r22
 6e0:	70 e0       	ldi	r23, 0x00	; 0
 6e2:	60 e0       	ldi	r22, 0x00	; 0
 6e4:	2a f0       	brmi	.+10     	; 0x6f0 <__floatsisf+0x6c>
 6e6:	9a 95       	dec	r25
 6e8:	66 0f       	add	r22, r22
 6ea:	77 1f       	adc	r23, r23
 6ec:	88 1f       	adc	r24, r24
 6ee:	da f7       	brpl	.-10     	; 0x6e6 <__floatsisf+0x62>
 6f0:	88 0f       	add	r24, r24
 6f2:	96 95       	lsr	r25
 6f4:	87 95       	ror	r24
 6f6:	97 f9       	bld	r25, 7
 6f8:	08 95       	ret

000006fa <__fp_inf>:
 6fa:	97 f9       	bld	r25, 7
 6fc:	9f 67       	ori	r25, 0x7F	; 127
 6fe:	80 e8       	ldi	r24, 0x80	; 128
 700:	70 e0       	ldi	r23, 0x00	; 0
 702:	60 e0       	ldi	r22, 0x00	; 0
 704:	08 95       	ret

00000706 <__fp_nan>:
 706:	9f ef       	ldi	r25, 0xFF	; 255
 708:	80 ec       	ldi	r24, 0xC0	; 192
 70a:	08 95       	ret

0000070c <__fp_pscA>:
 70c:	00 24       	eor	r0, r0
 70e:	0a 94       	dec	r0
 710:	16 16       	cp	r1, r22
 712:	17 06       	cpc	r1, r23
 714:	18 06       	cpc	r1, r24
 716:	09 06       	cpc	r0, r25
 718:	08 95       	ret

0000071a <__fp_pscB>:
 71a:	00 24       	eor	r0, r0
 71c:	0a 94       	dec	r0
 71e:	12 16       	cp	r1, r18
 720:	13 06       	cpc	r1, r19
 722:	14 06       	cpc	r1, r20
 724:	05 06       	cpc	r0, r21
 726:	08 95       	ret

00000728 <__fp_round>:
 728:	09 2e       	mov	r0, r25
 72a:	03 94       	inc	r0
 72c:	00 0c       	add	r0, r0
 72e:	11 f4       	brne	.+4      	; 0x734 <__fp_round+0xc>
 730:	88 23       	and	r24, r24
 732:	52 f0       	brmi	.+20     	; 0x748 <__fp_round+0x20>
 734:	bb 0f       	add	r27, r27
 736:	40 f4       	brcc	.+16     	; 0x748 <__fp_round+0x20>
 738:	bf 2b       	or	r27, r31
 73a:	11 f4       	brne	.+4      	; 0x740 <__fp_round+0x18>
 73c:	60 ff       	sbrs	r22, 0
 73e:	04 c0       	rjmp	.+8      	; 0x748 <__fp_round+0x20>
 740:	6f 5f       	subi	r22, 0xFF	; 255
 742:	7f 4f       	sbci	r23, 0xFF	; 255
 744:	8f 4f       	sbci	r24, 0xFF	; 255
 746:	9f 4f       	sbci	r25, 0xFF	; 255
 748:	08 95       	ret

0000074a <__fp_split3>:
 74a:	57 fd       	sbrc	r21, 7
 74c:	90 58       	subi	r25, 0x80	; 128
 74e:	44 0f       	add	r20, r20
 750:	55 1f       	adc	r21, r21
 752:	59 f0       	breq	.+22     	; 0x76a <__fp_splitA+0x10>
 754:	5f 3f       	cpi	r21, 0xFF	; 255
 756:	71 f0       	breq	.+28     	; 0x774 <__fp_splitA+0x1a>
 758:	47 95       	ror	r20

0000075a <__fp_splitA>:
 75a:	88 0f       	add	r24, r24
 75c:	97 fb       	bst	r25, 7
 75e:	99 1f       	adc	r25, r25
 760:	61 f0       	breq	.+24     	; 0x77a <__fp_splitA+0x20>
 762:	9f 3f       	cpi	r25, 0xFF	; 255
 764:	79 f0       	breq	.+30     	; 0x784 <__fp_splitA+0x2a>
 766:	87 95       	ror	r24
 768:	08 95       	ret
 76a:	12 16       	cp	r1, r18
 76c:	13 06       	cpc	r1, r19
 76e:	14 06       	cpc	r1, r20
 770:	55 1f       	adc	r21, r21
 772:	f2 cf       	rjmp	.-28     	; 0x758 <__fp_split3+0xe>
 774:	46 95       	lsr	r20
 776:	f1 df       	rcall	.-30     	; 0x75a <__fp_splitA>
 778:	08 c0       	rjmp	.+16     	; 0x78a <__fp_splitA+0x30>
 77a:	16 16       	cp	r1, r22
 77c:	17 06       	cpc	r1, r23
 77e:	18 06       	cpc	r1, r24
 780:	99 1f       	adc	r25, r25
 782:	f1 cf       	rjmp	.-30     	; 0x766 <__fp_splitA+0xc>
 784:	86 95       	lsr	r24
 786:	71 05       	cpc	r23, r1
 788:	61 05       	cpc	r22, r1
 78a:	08 94       	sec
 78c:	08 95       	ret

0000078e <__fp_zero>:
 78e:	e8 94       	clt

00000790 <__fp_szero>:
 790:	bb 27       	eor	r27, r27
 792:	66 27       	eor	r22, r22
 794:	77 27       	eor	r23, r23
 796:	cb 01       	movw	r24, r22
 798:	97 f9       	bld	r25, 7
 79a:	08 95       	ret
 79c:	16 f0       	brts	.+4      	; 0x7a2 <__fp_szero+0x12>
 79e:	0c 94 8b 04 	jmp	0x916	; 0x916 <__fp_mpack>
 7a2:	0c 94 83 03 	jmp	0x706	; 0x706 <__fp_nan>
 7a6:	68 94       	set
 7a8:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__fp_inf>

000007ac <log>:
 7ac:	0e 94 ad 03 	call	0x75a	; 0x75a <__fp_splitA>
 7b0:	a8 f3       	brcs	.-22     	; 0x79c <__fp_szero+0xc>
 7b2:	99 23       	and	r25, r25
 7b4:	c1 f3       	breq	.-16     	; 0x7a6 <__fp_szero+0x16>
 7b6:	ae f3       	brts	.-22     	; 0x7a2 <__fp_szero+0x12>
 7b8:	df 93       	push	r29
 7ba:	cf 93       	push	r28
 7bc:	1f 93       	push	r17
 7be:	0f 93       	push	r16
 7c0:	ff 92       	push	r15
 7c2:	c9 2f       	mov	r28, r25
 7c4:	dd 27       	eor	r29, r29
 7c6:	88 23       	and	r24, r24
 7c8:	2a f0       	brmi	.+10     	; 0x7d4 <log+0x28>
 7ca:	21 97       	sbiw	r28, 0x01	; 1
 7cc:	66 0f       	add	r22, r22
 7ce:	77 1f       	adc	r23, r23
 7d0:	88 1f       	adc	r24, r24
 7d2:	da f7       	brpl	.-10     	; 0x7ca <log+0x1e>
 7d4:	20 e0       	ldi	r18, 0x00	; 0
 7d6:	30 e0       	ldi	r19, 0x00	; 0
 7d8:	40 e8       	ldi	r20, 0x80	; 128
 7da:	5f eb       	ldi	r21, 0xBF	; 191
 7dc:	9f e3       	ldi	r25, 0x3F	; 63
 7de:	88 39       	cpi	r24, 0x98	; 152
 7e0:	20 f0       	brcs	.+8      	; 0x7ea <log+0x3e>
 7e2:	80 3e       	cpi	r24, 0xE0	; 224
 7e4:	38 f0       	brcs	.+14     	; 0x7f4 <log+0x48>
 7e6:	21 96       	adiw	r28, 0x01	; 1
 7e8:	8f 77       	andi	r24, 0x7F	; 127
 7ea:	0e 94 2c 02 	call	0x458	; 0x458 <__addsf3>
 7ee:	e8 e6       	ldi	r30, 0x68	; 104
 7f0:	f0 e0       	ldi	r31, 0x00	; 0
 7f2:	04 c0       	rjmp	.+8      	; 0x7fc <log+0x50>
 7f4:	0e 94 2c 02 	call	0x458	; 0x458 <__addsf3>
 7f8:	e5 e9       	ldi	r30, 0x95	; 149
 7fa:	f0 e0       	ldi	r31, 0x00	; 0
 7fc:	0e 94 99 04 	call	0x932	; 0x932 <__fp_powser>
 800:	8b 01       	movw	r16, r22
 802:	be 01       	movw	r22, r28
 804:	ec 01       	movw	r28, r24
 806:	fb 2e       	mov	r15, r27
 808:	6f 57       	subi	r22, 0x7F	; 127
 80a:	71 09       	sbc	r23, r1
 80c:	75 95       	asr	r23
 80e:	77 1f       	adc	r23, r23
 810:	88 0b       	sbc	r24, r24
 812:	99 0b       	sbc	r25, r25
 814:	0e 94 42 03 	call	0x684	; 0x684 <__floatsisf>
 818:	28 e1       	ldi	r18, 0x18	; 24
 81a:	32 e7       	ldi	r19, 0x72	; 114
 81c:	41 e3       	ldi	r20, 0x31	; 49
 81e:	5f e3       	ldi	r21, 0x3F	; 63
 820:	0e 94 31 04 	call	0x862	; 0x862 <__mulsf3x>
 824:	af 2d       	mov	r26, r15
 826:	98 01       	movw	r18, r16
 828:	ae 01       	movw	r20, r28
 82a:	ff 90       	pop	r15
 82c:	0f 91       	pop	r16
 82e:	1f 91       	pop	r17
 830:	cf 91       	pop	r28
 832:	df 91       	pop	r29
 834:	0e 94 43 02 	call	0x486	; 0x486 <__addsf3x>
 838:	0c 94 94 03 	jmp	0x728	; 0x728 <__fp_round>

0000083c <__mulsf3>:
 83c:	0e 94 31 04 	call	0x862	; 0x862 <__mulsf3x>
 840:	0c 94 94 03 	jmp	0x728	; 0x728 <__fp_round>
 844:	0e 94 86 03 	call	0x70c	; 0x70c <__fp_pscA>
 848:	38 f0       	brcs	.+14     	; 0x858 <__mulsf3+0x1c>
 84a:	0e 94 8d 03 	call	0x71a	; 0x71a <__fp_pscB>
 84e:	20 f0       	brcs	.+8      	; 0x858 <__mulsf3+0x1c>
 850:	95 23       	and	r25, r21
 852:	11 f0       	breq	.+4      	; 0x858 <__mulsf3+0x1c>
 854:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__fp_inf>
 858:	0c 94 83 03 	jmp	0x706	; 0x706 <__fp_nan>
 85c:	11 24       	eor	r1, r1
 85e:	0c 94 c8 03 	jmp	0x790	; 0x790 <__fp_szero>

00000862 <__mulsf3x>:
 862:	0e 94 a5 03 	call	0x74a	; 0x74a <__fp_split3>
 866:	70 f3       	brcs	.-36     	; 0x844 <__mulsf3+0x8>

00000868 <__mulsf3_pse>:
 868:	95 9f       	mul	r25, r21
 86a:	c1 f3       	breq	.-16     	; 0x85c <__mulsf3+0x20>
 86c:	95 0f       	add	r25, r21
 86e:	50 e0       	ldi	r21, 0x00	; 0
 870:	55 1f       	adc	r21, r21
 872:	62 9f       	mul	r22, r18
 874:	f0 01       	movw	r30, r0
 876:	72 9f       	mul	r23, r18
 878:	bb 27       	eor	r27, r27
 87a:	f0 0d       	add	r31, r0
 87c:	b1 1d       	adc	r27, r1
 87e:	63 9f       	mul	r22, r19
 880:	aa 27       	eor	r26, r26
 882:	f0 0d       	add	r31, r0
 884:	b1 1d       	adc	r27, r1
 886:	aa 1f       	adc	r26, r26
 888:	64 9f       	mul	r22, r20
 88a:	66 27       	eor	r22, r22
 88c:	b0 0d       	add	r27, r0
 88e:	a1 1d       	adc	r26, r1
 890:	66 1f       	adc	r22, r22
 892:	82 9f       	mul	r24, r18
 894:	22 27       	eor	r18, r18
 896:	b0 0d       	add	r27, r0
 898:	a1 1d       	adc	r26, r1
 89a:	62 1f       	adc	r22, r18
 89c:	73 9f       	mul	r23, r19
 89e:	b0 0d       	add	r27, r0
 8a0:	a1 1d       	adc	r26, r1
 8a2:	62 1f       	adc	r22, r18
 8a4:	83 9f       	mul	r24, r19
 8a6:	a0 0d       	add	r26, r0
 8a8:	61 1d       	adc	r22, r1
 8aa:	22 1f       	adc	r18, r18
 8ac:	74 9f       	mul	r23, r20
 8ae:	33 27       	eor	r19, r19
 8b0:	a0 0d       	add	r26, r0
 8b2:	61 1d       	adc	r22, r1
 8b4:	23 1f       	adc	r18, r19
 8b6:	84 9f       	mul	r24, r20
 8b8:	60 0d       	add	r22, r0
 8ba:	21 1d       	adc	r18, r1
 8bc:	82 2f       	mov	r24, r18
 8be:	76 2f       	mov	r23, r22
 8c0:	6a 2f       	mov	r22, r26
 8c2:	11 24       	eor	r1, r1
 8c4:	9f 57       	subi	r25, 0x7F	; 127
 8c6:	50 40       	sbci	r21, 0x00	; 0
 8c8:	9a f0       	brmi	.+38     	; 0x8f0 <__mulsf3_pse+0x88>
 8ca:	f1 f0       	breq	.+60     	; 0x908 <__stack+0x9>
 8cc:	88 23       	and	r24, r24
 8ce:	4a f0       	brmi	.+18     	; 0x8e2 <__mulsf3_pse+0x7a>
 8d0:	ee 0f       	add	r30, r30
 8d2:	ff 1f       	adc	r31, r31
 8d4:	bb 1f       	adc	r27, r27
 8d6:	66 1f       	adc	r22, r22
 8d8:	77 1f       	adc	r23, r23
 8da:	88 1f       	adc	r24, r24
 8dc:	91 50       	subi	r25, 0x01	; 1
 8de:	50 40       	sbci	r21, 0x00	; 0
 8e0:	a9 f7       	brne	.-22     	; 0x8cc <__mulsf3_pse+0x64>
 8e2:	9e 3f       	cpi	r25, 0xFE	; 254
 8e4:	51 05       	cpc	r21, r1
 8e6:	80 f0       	brcs	.+32     	; 0x908 <__stack+0x9>
 8e8:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__fp_inf>
 8ec:	0c 94 c8 03 	jmp	0x790	; 0x790 <__fp_szero>
 8f0:	5f 3f       	cpi	r21, 0xFF	; 255
 8f2:	e4 f3       	brlt	.-8      	; 0x8ec <__mulsf3_pse+0x84>
 8f4:	98 3e       	cpi	r25, 0xE8	; 232
 8f6:	d4 f3       	brlt	.-12     	; 0x8ec <__mulsf3_pse+0x84>
 8f8:	86 95       	lsr	r24
 8fa:	77 95       	ror	r23
 8fc:	67 95       	ror	r22
 8fe:	b7 95       	ror	r27
 900:	f7 95       	ror	r31
 902:	e7 95       	ror	r30
 904:	9f 5f       	subi	r25, 0xFF	; 255
 906:	c1 f7       	brne	.-16     	; 0x8f8 <__mulsf3_pse+0x90>
 908:	fe 2b       	or	r31, r30
 90a:	88 0f       	add	r24, r24
 90c:	91 1d       	adc	r25, r1
 90e:	96 95       	lsr	r25
 910:	87 95       	ror	r24
 912:	97 f9       	bld	r25, 7
 914:	08 95       	ret

00000916 <__fp_mpack>:
 916:	9f 3f       	cpi	r25, 0xFF	; 255
 918:	31 f0       	breq	.+12     	; 0x926 <__fp_mpack_finite+0xc>

0000091a <__fp_mpack_finite>:
 91a:	91 50       	subi	r25, 0x01	; 1
 91c:	20 f4       	brcc	.+8      	; 0x926 <__fp_mpack_finite+0xc>
 91e:	87 95       	ror	r24
 920:	77 95       	ror	r23
 922:	67 95       	ror	r22
 924:	b7 95       	ror	r27
 926:	88 0f       	add	r24, r24
 928:	91 1d       	adc	r25, r1
 92a:	96 95       	lsr	r25
 92c:	87 95       	ror	r24
 92e:	97 f9       	bld	r25, 7
 930:	08 95       	ret

00000932 <__fp_powser>:
 932:	df 93       	push	r29
 934:	cf 93       	push	r28
 936:	1f 93       	push	r17
 938:	0f 93       	push	r16
 93a:	ff 92       	push	r15
 93c:	ef 92       	push	r14
 93e:	df 92       	push	r13
 940:	7b 01       	movw	r14, r22
 942:	8c 01       	movw	r16, r24
 944:	68 94       	set
 946:	06 c0       	rjmp	.+12     	; 0x954 <__fp_powser+0x22>
 948:	da 2e       	mov	r13, r26
 94a:	ef 01       	movw	r28, r30
 94c:	0e 94 31 04 	call	0x862	; 0x862 <__mulsf3x>
 950:	fe 01       	movw	r30, r28
 952:	e8 94       	clt
 954:	a5 91       	lpm	r26, Z+
 956:	25 91       	lpm	r18, Z+
 958:	35 91       	lpm	r19, Z+
 95a:	45 91       	lpm	r20, Z+
 95c:	55 91       	lpm	r21, Z+
 95e:	a6 f3       	brts	.-24     	; 0x948 <__fp_powser+0x16>
 960:	ef 01       	movw	r28, r30
 962:	0e 94 43 02 	call	0x486	; 0x486 <__addsf3x>
 966:	fe 01       	movw	r30, r28
 968:	97 01       	movw	r18, r14
 96a:	a8 01       	movw	r20, r16
 96c:	da 94       	dec	r13
 96e:	69 f7       	brne	.-38     	; 0x94a <__fp_powser+0x18>
 970:	df 90       	pop	r13
 972:	ef 90       	pop	r14
 974:	ff 90       	pop	r15
 976:	0f 91       	pop	r16
 978:	1f 91       	pop	r17
 97a:	cf 91       	pop	r28
 97c:	df 91       	pop	r29
 97e:	08 95       	ret

00000980 <__divmodhi4>:
 980:	97 fb       	bst	r25, 7
 982:	07 2e       	mov	r0, r23
 984:	16 f4       	brtc	.+4      	; 0x98a <__divmodhi4+0xa>
 986:	00 94       	com	r0
 988:	07 d0       	rcall	.+14     	; 0x998 <__divmodhi4_neg1>
 98a:	77 fd       	sbrc	r23, 7
 98c:	09 d0       	rcall	.+18     	; 0x9a0 <__divmodhi4_neg2>
 98e:	0e 94 05 05 	call	0xa0a	; 0xa0a <__udivmodhi4>
 992:	07 fc       	sbrc	r0, 7
 994:	05 d0       	rcall	.+10     	; 0x9a0 <__divmodhi4_neg2>
 996:	3e f4       	brtc	.+14     	; 0x9a6 <__divmodhi4_exit>

00000998 <__divmodhi4_neg1>:
 998:	90 95       	com	r25
 99a:	81 95       	neg	r24
 99c:	9f 4f       	sbci	r25, 0xFF	; 255
 99e:	08 95       	ret

000009a0 <__divmodhi4_neg2>:
 9a0:	70 95       	com	r23
 9a2:	61 95       	neg	r22
 9a4:	7f 4f       	sbci	r23, 0xFF	; 255

000009a6 <__divmodhi4_exit>:
 9a6:	08 95       	ret

000009a8 <__udivmodsi4>:
 9a8:	a1 e2       	ldi	r26, 0x21	; 33
 9aa:	1a 2e       	mov	r1, r26
 9ac:	aa 1b       	sub	r26, r26
 9ae:	bb 1b       	sub	r27, r27
 9b0:	fd 01       	movw	r30, r26
 9b2:	0d c0       	rjmp	.+26     	; 0x9ce <__udivmodsi4_ep>

000009b4 <__udivmodsi4_loop>:
 9b4:	aa 1f       	adc	r26, r26
 9b6:	bb 1f       	adc	r27, r27
 9b8:	ee 1f       	adc	r30, r30
 9ba:	ff 1f       	adc	r31, r31
 9bc:	a2 17       	cp	r26, r18
 9be:	b3 07       	cpc	r27, r19
 9c0:	e4 07       	cpc	r30, r20
 9c2:	f5 07       	cpc	r31, r21
 9c4:	20 f0       	brcs	.+8      	; 0x9ce <__udivmodsi4_ep>
 9c6:	a2 1b       	sub	r26, r18
 9c8:	b3 0b       	sbc	r27, r19
 9ca:	e4 0b       	sbc	r30, r20
 9cc:	f5 0b       	sbc	r31, r21

000009ce <__udivmodsi4_ep>:
 9ce:	66 1f       	adc	r22, r22
 9d0:	77 1f       	adc	r23, r23
 9d2:	88 1f       	adc	r24, r24
 9d4:	99 1f       	adc	r25, r25
 9d6:	1a 94       	dec	r1
 9d8:	69 f7       	brne	.-38     	; 0x9b4 <__udivmodsi4_loop>
 9da:	60 95       	com	r22
 9dc:	70 95       	com	r23
 9de:	80 95       	com	r24
 9e0:	90 95       	com	r25
 9e2:	9b 01       	movw	r18, r22
 9e4:	ac 01       	movw	r20, r24
 9e6:	bd 01       	movw	r22, r26
 9e8:	cf 01       	movw	r24, r30
 9ea:	08 95       	ret

000009ec <__umulhisi3>:
 9ec:	a2 9f       	mul	r26, r18
 9ee:	b0 01       	movw	r22, r0
 9f0:	b3 9f       	mul	r27, r19
 9f2:	c0 01       	movw	r24, r0
 9f4:	a3 9f       	mul	r26, r19
 9f6:	70 0d       	add	r23, r0
 9f8:	81 1d       	adc	r24, r1
 9fa:	11 24       	eor	r1, r1
 9fc:	91 1d       	adc	r25, r1
 9fe:	b2 9f       	mul	r27, r18
 a00:	70 0d       	add	r23, r0
 a02:	81 1d       	adc	r24, r1
 a04:	11 24       	eor	r1, r1
 a06:	91 1d       	adc	r25, r1
 a08:	08 95       	ret

00000a0a <__udivmodhi4>:
 a0a:	aa 1b       	sub	r26, r26
 a0c:	bb 1b       	sub	r27, r27
 a0e:	51 e1       	ldi	r21, 0x11	; 17
 a10:	07 c0       	rjmp	.+14     	; 0xa20 <__udivmodhi4_ep>

00000a12 <__udivmodhi4_loop>:
 a12:	aa 1f       	adc	r26, r26
 a14:	bb 1f       	adc	r27, r27
 a16:	a6 17       	cp	r26, r22
 a18:	b7 07       	cpc	r27, r23
 a1a:	10 f0       	brcs	.+4      	; 0xa20 <__udivmodhi4_ep>
 a1c:	a6 1b       	sub	r26, r22
 a1e:	b7 0b       	sbc	r27, r23

00000a20 <__udivmodhi4_ep>:
 a20:	88 1f       	adc	r24, r24
 a22:	99 1f       	adc	r25, r25
 a24:	5a 95       	dec	r21
 a26:	a9 f7       	brne	.-22     	; 0xa12 <__udivmodhi4_loop>
 a28:	80 95       	com	r24
 a2a:	90 95       	com	r25
 a2c:	bc 01       	movw	r22, r24
 a2e:	cd 01       	movw	r24, r26
 a30:	08 95       	ret

00000a32 <_exit>:
 a32:	f8 94       	cli

00000a34 <__stop_program>:
 a34:	ff cf       	rjmp	.-2      	; 0xa34 <__stop_program>
