
Computador_de_Bordo.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002a  00800100  00000a30  00000ac4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000a30  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  0080012a  0080012a  00000aee  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000aee  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000b20  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a8  00000000  00000000  00000b60  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d93  00000000  00000000  00000c08  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000095a  00000000  00000000  0000199b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000061b  00000000  00000000  000022f5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000180  00000000  00000000  00002910  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004a1  00000000  00000000  00002a90  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000004ce  00000000  00000000  00002f31  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  000033ff  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__ctors_end>
   4:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
   8:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
   c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  10:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  14:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  18:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  1c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  20:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  24:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  28:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  2c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  30:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  34:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  38:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  3c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  40:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  44:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  48:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  4c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  50:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  54:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  58:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  5c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  60:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  64:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  68:	08 00       	.word	0x0008	; ????
  6a:	00 00       	nop
  6c:	be 92       	st	-X, r11
  6e:	24 49       	sbci	r18, 0x94	; 148
  70:	12 3e       	cpi	r17, 0xE2	; 226
  72:	ab aa       	std	Y+51, r10	; 0x33
  74:	aa 2a       	or	r10, r26
  76:	be cd       	rjmp	.-1156   	; 0xfffffbf4 <__eeprom_end+0xff7efbf4>
  78:	cc cc       	rjmp	.-1640   	; 0xfffffa12 <__eeprom_end+0xff7efa12>
  7a:	4c 3e       	cpi	r20, 0xEC	; 236
  7c:	00 00       	nop
  7e:	00 80       	ld	r0, Z
  80:	be ab       	std	Y+54, r27	; 0x36
  82:	aa aa       	std	Y+50, r10	; 0x32
  84:	aa 3e       	cpi	r26, 0xEA	; 234
  86:	00 00       	nop
  88:	00 00       	nop
  8a:	bf 00       	.word	0x00bf	; ????
  8c:	00 00       	nop
  8e:	80 3f       	cpi	r24, 0xF0	; 240
  90:	00 00       	nop
  92:	00 00       	nop
  94:	00 08       	sbc	r0, r0
  96:	41 78       	andi	r20, 0x81	; 129
  98:	d3 bb       	out	0x13, r29	; 19
  9a:	43 87       	std	Z+11, r20	; 0x0b
  9c:	d1 13       	cpse	r29, r17
  9e:	3d 19       	sub	r19, r13
  a0:	0e 3c       	cpi	r16, 0xCE	; 206
  a2:	c3 bd       	out	0x23, r28	; 35
  a4:	42 82       	std	Z+2, r4	; 0x02
  a6:	ad 2b       	or	r26, r29
  a8:	3e 68       	ori	r19, 0x8E	; 142
  aa:	ec 82       	std	Y+4, r14	; 0x04
  ac:	76 be       	out	0x36, r7	; 54
  ae:	d9 8f       	std	Y+25, r29	; 0x19
  b0:	e1 a9       	ldd	r30, Z+49	; 0x31
  b2:	3e 4c       	sbci	r19, 0xCE	; 206
  b4:	80 ef       	ldi	r24, 0xF0	; 240
  b6:	ff be       	out	0x3f, r15	; 63
  b8:	01 c4       	rjmp	.+2050   	; 0x8bc <__mulsf3_pse+0x5a>
  ba:	ff 7f       	andi	r31, 0xFF	; 255
  bc:	3f 00       	.word	0x003f	; ????
  be:	00 00       	nop
	...

000000c2 <__ctors_end>:
  c2:	11 24       	eor	r1, r1
  c4:	1f be       	out	0x3f, r1	; 63
  c6:	cf ef       	ldi	r28, 0xFF	; 255
  c8:	d8 e0       	ldi	r29, 0x08	; 8
  ca:	de bf       	out	0x3e, r29	; 62
  cc:	cd bf       	out	0x3d, r28	; 61

000000ce <__do_copy_data>:
  ce:	11 e0       	ldi	r17, 0x01	; 1
  d0:	a0 e0       	ldi	r26, 0x00	; 0
  d2:	b1 e0       	ldi	r27, 0x01	; 1
  d4:	e0 e3       	ldi	r30, 0x30	; 48
  d6:	fa e0       	ldi	r31, 0x0A	; 10
  d8:	02 c0       	rjmp	.+4      	; 0xde <__do_copy_data+0x10>
  da:	05 90       	lpm	r0, Z+
  dc:	0d 92       	st	X+, r0
  de:	aa 32       	cpi	r26, 0x2A	; 42
  e0:	b1 07       	cpc	r27, r17
  e2:	d9 f7       	brne	.-10     	; 0xda <__do_copy_data+0xc>

000000e4 <__do_clear_bss>:
  e4:	21 e0       	ldi	r18, 0x01	; 1
  e6:	aa e2       	ldi	r26, 0x2A	; 42
  e8:	b1 e0       	ldi	r27, 0x01	; 1
  ea:	01 c0       	rjmp	.+2      	; 0xee <.do_clear_bss_start>

000000ec <.do_clear_bss_loop>:
  ec:	1d 92       	st	X+, r1

000000ee <.do_clear_bss_start>:
  ee:	ac 32       	cpi	r26, 0x2C	; 44
  f0:	b2 07       	cpc	r27, r18
  f2:	e1 f7       	brne	.-8      	; 0xec <.do_clear_bss_loop>
  f4:	0e 94 0b 01 	call	0x216	; 0x216 <main>
  f8:	0c 94 16 05 	jmp	0xa2c	; 0xa2c <_exit>

000000fc <__bad_interrupt>:
  fc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000100 <ADC_begin>:


/* Replace with your library code */
void ADC_begin()
{
	ADCSRA = 0b10000111; // Enable ADC, prescaler = 128
 100:	87 e8       	ldi	r24, 0x87	; 135
 102:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
	conv = 1;
 106:	81 e0       	ldi	r24, 0x01	; 1
 108:	90 e0       	ldi	r25, 0x00	; 0
 10a:	90 93 2b 01 	sts	0x012B, r25	; 0x80012b <__data_end+0x1>
 10e:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <__data_end>
 112:	08 95       	ret

00000114 <lerAnalog>:
}

int lerAnalog(unsigned char pin){//pin 0 a 7
	ADMUX = 0b01000000 + pin; // tensão de referência AVCC e pin como entrada do ADC (REFS)
 114:	80 5c       	subi	r24, 0xC0	; 192
 116:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
	if (conv) {
 11a:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <__data_end>
 11e:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <__data_end+0x1>
 122:	89 2b       	or	r24, r25
 124:	49 f0       	breq	.+18     	; 0x138 <lerAnalog+0x24>
		set_bit(ADCSRA,ADSC); // iniciar leitura
 126:	ea e7       	ldi	r30, 0x7A	; 122
 128:	f0 e0       	ldi	r31, 0x00	; 0
 12a:	80 81       	ld	r24, Z
 12c:	80 64       	ori	r24, 0x40	; 64
 12e:	80 83       	st	Z, r24
		conv = 0;
 130:	10 92 2b 01 	sts	0x012B, r1	; 0x80012b <__data_end+0x1>
 134:	10 92 2a 01 	sts	0x012A, r1	; 0x80012a <__data_end>
	}
	if (!(ADCSRA & (1<<ADSC))) {
 138:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 13c:	86 fd       	sbrc	r24, 6
 13e:	0b c0       	rjmp	.+22     	; 0x156 <lerAnalog+0x42>
		conv = 1;
 140:	81 e0       	ldi	r24, 0x01	; 1
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	90 93 2b 01 	sts	0x012B, r25	; 0x80012b <__data_end+0x1>
 148:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <__data_end>
		return (ADC);
 14c:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
 150:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 154:	08 95       	ret
	}
}
 156:	08 95       	ret

00000158 <tensao>:

float tensao(char pin){
	int leitura = lerAnalog(pin);
 158:	0e 94 8a 00 	call	0x114	; 0x114 <lerAnalog>
	return (5.0*leitura)/1023.00;
 15c:	bc 01       	movw	r22, r24
 15e:	99 0f       	add	r25, r25
 160:	88 0b       	sbc	r24, r24
 162:	99 0b       	sbc	r25, r25
 164:	0e 94 3f 03 	call	0x67e	; 0x67e <__floatsisf>
 168:	20 e0       	ldi	r18, 0x00	; 0
 16a:	30 e0       	ldi	r19, 0x00	; 0
 16c:	40 ea       	ldi	r20, 0xA0	; 160
 16e:	50 e4       	ldi	r21, 0x40	; 64
 170:	0e 94 1b 04 	call	0x836	; 0x836 <__mulsf3>
 174:	20 e0       	ldi	r18, 0x00	; 0
 176:	30 ec       	ldi	r19, 0xC0	; 192
 178:	4f e7       	ldi	r20, 0x7F	; 127
 17a:	54 e4       	ldi	r21, 0x44	; 68
 17c:	0e 94 95 02 	call	0x52a	; 0x52a <__divsf3>
 180:	08 95       	ret

00000182 <ntc_10k>:
#include "def_principais.h"
#include "USART.h"
#include "ADC.h"


double ntc_10k(char pin){
 182:	cf 92       	push	r12
 184:	df 92       	push	r13
 186:	ef 92       	push	r14
 188:	ff 92       	push	r15
	Rinf = Rd0*exp(-beta/T0),               //Parâmetro de resistência
	Vadc = 0.0,                             //Tensão lida pelo ADC
	Rntc = 0.0,
	temp;									//Resistencia do NTC

	Vadc = tensao(pin);
 18a:	0e 94 ac 00 	call	0x158	; 0x158 <tensao>
 18e:	6b 01       	movw	r12, r22
 190:	7c 01       	movw	r14, r24
	Rntc = (R2*5.0-Vadc*R2)/Vadc;
 192:	20 e0       	ldi	r18, 0x00	; 0
 194:	30 e4       	ldi	r19, 0x40	; 64
 196:	4c e1       	ldi	r20, 0x1C	; 28
 198:	56 e4       	ldi	r21, 0x46	; 70
 19a:	0e 94 1b 04 	call	0x836	; 0x836 <__mulsf3>
 19e:	9b 01       	movw	r18, r22
 1a0:	ac 01       	movw	r20, r24
 1a2:	60 e0       	ldi	r22, 0x00	; 0
 1a4:	70 e5       	ldi	r23, 0x50	; 80
 1a6:	83 e4       	ldi	r24, 0x43	; 67
 1a8:	97 e4       	ldi	r25, 0x47	; 71
 1aa:	0e 94 28 02 	call	0x450	; 0x450 <__subsf3>
 1ae:	a7 01       	movw	r20, r14
 1b0:	96 01       	movw	r18, r12
 1b2:	0e 94 95 02 	call	0x52a	; 0x52a <__divsf3>
	temp = beta/log(Rntc/Rinf);				//Temperatura em Kelvin
 1b6:	2c ef       	ldi	r18, 0xFC	; 252
 1b8:	38 ed       	ldi	r19, 0xD8	; 216
 1ba:	42 ed       	ldi	r20, 0xD2	; 210
 1bc:	5b e3       	ldi	r21, 0x3B	; 59
 1be:	0e 94 95 02 	call	0x52a	; 0x52a <__divsf3>
 1c2:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <log>
 1c6:	9b 01       	movw	r18, r22
 1c8:	ac 01       	movw	r20, r24
 1ca:	65 e6       	ldi	r22, 0x65	; 101
 1cc:	74 ed       	ldi	r23, 0xD4	; 212
 1ce:	84 e8       	ldi	r24, 0x84	; 132
 1d0:	95 e4       	ldi	r25, 0x45	; 69
 1d2:	0e 94 95 02 	call	0x52a	; 0x52a <__divsf3>
	return temp - 273.15;					//Retorna Temperatura em Celsius
 1d6:	23 e3       	ldi	r18, 0x33	; 51
 1d8:	33 e9       	ldi	r19, 0x93	; 147
 1da:	48 e8       	ldi	r20, 0x88	; 136
 1dc:	53 e4       	ldi	r21, 0x43	; 67
 1de:	0e 94 28 02 	call	0x450	; 0x450 <__subsf3>
}
 1e2:	ff 90       	pop	r15
 1e4:	ef 90       	pop	r14
 1e6:	df 90       	pop	r13
 1e8:	cf 90       	pop	r12
 1ea:	08 95       	ret

000001ec <bat2>:

double bat2(unsigned char pin, double b1){
 1ec:	cf 92       	push	r12
 1ee:	df 92       	push	r13
 1f0:	ef 92       	push	r14
 1f2:	ff 92       	push	r15
 1f4:	6a 01       	movw	r12, r20
 1f6:	7b 01       	movw	r14, r22
	return (tensao(pin)/(0.5))-b1; //tensão/(R1/(R1+R2)) retorna a tensão de entrada do divisor de tensão menos a tensão da primeira bateria
 1f8:	0e 94 ac 00 	call	0x158	; 0x158 <tensao>
 1fc:	9b 01       	movw	r18, r22
 1fe:	ac 01       	movw	r20, r24
 200:	0e 94 29 02 	call	0x452	; 0x452 <__addsf3>
 204:	a7 01       	movw	r20, r14
 206:	96 01       	movw	r18, r12
 208:	0e 94 28 02 	call	0x450	; 0x450 <__subsf3>
}
 20c:	ff 90       	pop	r15
 20e:	ef 90       	pop	r14
 210:	df 90       	pop	r13
 212:	cf 90       	pop	r12
 214:	08 95       	ret

00000216 <main>:

int main(void)
{
 216:	cf 93       	push	r28
 218:	df 93       	push	r29
 21a:	cd b7       	in	r28, 0x3d	; 61
 21c:	de b7       	in	r29, 0x3e	; 62
 21e:	ab 97       	sbiw	r28, 0x2b	; 43
 220:	0f b6       	in	r0, 0x3f	; 63
 222:	f8 94       	cli
 224:	de bf       	out	0x3e, r29	; 62
 226:	0f be       	out	0x3f, r0	; 63
 228:	cd bf       	out	0x3d, r28	; 61
	ADC_begin();
 22a:	0e 94 80 00 	call	0x100	; 0x100 <ADC_begin>
	USART_Inic(9600);
 22e:	80 e8       	ldi	r24, 0x80	; 128
 230:	95 e2       	ldi	r25, 0x25	; 37
 232:	0e 94 69 01 	call	0x2d2	; 0x2d2 <USART_Inic>
    while (1) 
    {
		char t1[] = "Temperatura:  ";
 236:	8f e0       	ldi	r24, 0x0F	; 15
 238:	e0 e0       	ldi	r30, 0x00	; 0
 23a:	f1 e0       	ldi	r31, 0x01	; 1
 23c:	de 01       	movw	r26, r28
 23e:	11 96       	adiw	r26, 0x01	; 1
 240:	01 90       	ld	r0, Z+
 242:	0d 92       	st	X+, r0
 244:	8a 95       	dec	r24
 246:	e1 f7       	brne	.-8      	; 0x240 <main+0x2a>
		char b1[] = "\tBateria1:  ";
 248:	8d e0       	ldi	r24, 0x0D	; 13
 24a:	ef e0       	ldi	r30, 0x0F	; 15
 24c:	f1 e0       	ldi	r31, 0x01	; 1
 24e:	de 01       	movw	r26, r28
 250:	5d 96       	adiw	r26, 0x1d	; 29
 252:	01 90       	ld	r0, Z+
 254:	0d 92       	st	X+, r0
 256:	8a 95       	dec	r24
 258:	e1 f7       	brne	.-8      	; 0x252 <main+0x3c>
		char b2[] = "\tBateria2:  ";
 25a:	8d e0       	ldi	r24, 0x0D	; 13
 25c:	ec e1       	ldi	r30, 0x1C	; 28
 25e:	f1 e0       	ldi	r31, 0x01	; 1
 260:	de 01       	movw	r26, r28
 262:	50 96       	adiw	r26, 0x10	; 16
 264:	01 90       	ld	r0, Z+
 266:	0d 92       	st	X+, r0
 268:	8a 95       	dec	r24
 26a:	e1 f7       	brne	.-8      	; 0x264 <main+0x4e>
		char fim[] = "\n";
 26c:	8a e0       	ldi	r24, 0x0A	; 10
 26e:	90 e0       	ldi	r25, 0x00	; 0
 270:	9b a7       	std	Y+43, r25	; 0x2b
 272:	8a a7       	std	Y+42, r24	; 0x2a
		double bateria1 = tensao(1);
 274:	81 e0       	ldi	r24, 0x01	; 1
 276:	0e 94 ac 00 	call	0x158	; 0x158 <tensao>
 27a:	6b 01       	movw	r12, r22
 27c:	7c 01       	movw	r14, r24
		escreve_USART(t1);
 27e:	ce 01       	movw	r24, r28
 280:	01 96       	adiw	r24, 0x01	; 1
 282:	0e 94 88 01 	call	0x310	; 0x310 <escreve_USART>
		envia_double(ntc_10k(3));
 286:	83 e0       	ldi	r24, 0x03	; 3
 288:	0e 94 c1 00 	call	0x182	; 0x182 <ntc_10k>
 28c:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <envia_double>
		escreve_USART(b1);	envia_double(bateria1);
 290:	ce 01       	movw	r24, r28
 292:	4d 96       	adiw	r24, 0x1d	; 29
 294:	0e 94 88 01 	call	0x310	; 0x310 <escreve_USART>
 298:	c7 01       	movw	r24, r14
 29a:	b6 01       	movw	r22, r12
 29c:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <envia_double>
		escreve_USART(b2);	envia_double(bat2(6, bateria1));
 2a0:	ce 01       	movw	r24, r28
 2a2:	40 96       	adiw	r24, 0x10	; 16
 2a4:	0e 94 88 01 	call	0x310	; 0x310 <escreve_USART>
 2a8:	b7 01       	movw	r22, r14
 2aa:	a6 01       	movw	r20, r12
 2ac:	86 e0       	ldi	r24, 0x06	; 6
 2ae:	0e 94 f6 00 	call	0x1ec	; 0x1ec <bat2>
 2b2:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <envia_double>
		escreve_USART(fim);
 2b6:	ce 01       	movw	r24, r28
 2b8:	8a 96       	adiw	r24, 0x2a	; 42
 2ba:	0e 94 88 01 	call	0x310	; 0x310 <escreve_USART>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2be:	2f ef       	ldi	r18, 0xFF	; 255
 2c0:	83 ed       	ldi	r24, 0xD3	; 211
 2c2:	90 e3       	ldi	r25, 0x30	; 48
 2c4:	21 50       	subi	r18, 0x01	; 1
 2c6:	80 40       	sbci	r24, 0x00	; 0
 2c8:	90 40       	sbci	r25, 0x00	; 0
 2ca:	e1 f7       	brne	.-8      	; 0x2c4 <main+0xae>
 2cc:	00 c0       	rjmp	.+0      	; 0x2ce <main+0xb8>
 2ce:	00 00       	nop
 2d0:	b2 cf       	rjmp	.-156    	; 0x236 <main+0x20>

000002d2 <USART_Inic>:
//------------------------------------------------------------------------------------
unsigned char USART_Recebe()
{
	while (!(UCSR0A & (1<<RXC0))); //espera o dado ser recebido
	return UDR0; //retorna o dado recebido
}
 2d2:	9c 01       	movw	r18, r24
 2d4:	40 e0       	ldi	r20, 0x00	; 0
 2d6:	50 e0       	ldi	r21, 0x00	; 0
 2d8:	60 e4       	ldi	r22, 0x40	; 64
 2da:	72 e4       	ldi	r23, 0x42	; 66
 2dc:	8f e0       	ldi	r24, 0x0F	; 15
 2de:	90 e0       	ldi	r25, 0x00	; 0
 2e0:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <__udivmodsi4>
 2e4:	21 50       	subi	r18, 0x01	; 1
 2e6:	31 09       	sbc	r19, r1
 2e8:	30 93 c5 00 	sts	0x00C5, r19	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 2ec:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 2f0:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 2f4:	88 e1       	ldi	r24, 0x18	; 24
 2f6:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
 2fa:	86 e0       	ldi	r24, 0x06	; 6
 2fc:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 300:	08 95       	ret

00000302 <USART_Transmite>:
 302:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 306:	95 ff       	sbrs	r25, 5
 308:	fc cf       	rjmp	.-8      	; 0x302 <USART_Transmite>
 30a:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 30e:	08 95       	ret

00000310 <escreve_USART>:
//------------------------------------------------------------------------------------
void escreve_USART(char *c) //escreve String (RAM)
{
 310:	cf 93       	push	r28
 312:	df 93       	push	r29
 314:	ec 01       	movw	r28, r24
	for (; *c!=0;c++) USART_Transmite(*c);
 316:	03 c0       	rjmp	.+6      	; 0x31e <escreve_USART+0xe>
 318:	0e 94 81 01 	call	0x302	; 0x302 <USART_Transmite>
 31c:	21 96       	adiw	r28, 0x01	; 1
 31e:	88 81       	ld	r24, Y
 320:	81 11       	cpse	r24, r1
 322:	fa cf       	rjmp	.-12     	; 0x318 <escreve_USART+0x8>
}
 324:	df 91       	pop	r29
 326:	cf 91       	pop	r28
 328:	08 95       	ret

0000032a <envia_int>:
//------------------------------------------------------------------------------------
//Conversão de um número em seus digitos individuais
//------------------------------------------------------------------------------------
void envia_int(unsigned int valor)
{
 32a:	1f 93       	push	r17
 32c:	cf 93       	push	r28
 32e:	df 93       	push	r29
 330:	cd b7       	in	r28, 0x3d	; 61
 332:	de b7       	in	r29, 0x3e	; 62
 334:	28 97       	sbiw	r28, 0x08	; 8
 336:	0f b6       	in	r0, 0x3f	; 63
 338:	f8 94       	cli
 33a:	de bf       	out	0x3e, r29	; 62
 33c:	0f be       	out	0x3f, r0	; 63
 33e:	cd bf       	out	0x3d, r28	; 61
 340:	ac 01       	movw	r20, r24
	unsigned char disp[tam];
	unsigned char n;
	for(n=0; n<tam; n++)
 342:	80 e0       	ldi	r24, 0x00	; 0
 344:	08 c0       	rjmp	.+16     	; 0x356 <envia_int+0x2c>
	disp[n] = 0; //limpa vetor para armazenagem dos digitos
 346:	e1 e0       	ldi	r30, 0x01	; 1
 348:	f0 e0       	ldi	r31, 0x00	; 0
 34a:	ec 0f       	add	r30, r28
 34c:	fd 1f       	adc	r31, r29
 34e:	e8 0f       	add	r30, r24
 350:	f1 1d       	adc	r31, r1
 352:	10 82       	st	Z, r1
//------------------------------------------------------------------------------------
void envia_int(unsigned int valor)
{
	unsigned char disp[tam];
	unsigned char n;
	for(n=0; n<tam; n++)
 354:	8f 5f       	subi	r24, 0xFF	; 255
 356:	88 30       	cpi	r24, 0x08	; 8
 358:	b0 f3       	brcs	.-20     	; 0x346 <envia_int+0x1c>
 35a:	10 e0       	ldi	r17, 0x00	; 0
	disp[n] = 0; //limpa vetor para armazenagem dos digitos
	n=0;
	do
	{
		disp[n] = (valor%10) + '0'; //pega o resto da divisão por 10
 35c:	9a 01       	movw	r18, r20
 35e:	ad ec       	ldi	r26, 0xCD	; 205
 360:	bc ec       	ldi	r27, 0xCC	; 204
 362:	0e 94 f3 04 	call	0x9e6	; 0x9e6 <__umulhisi3>
 366:	96 95       	lsr	r25
 368:	87 95       	ror	r24
 36a:	96 95       	lsr	r25
 36c:	87 95       	ror	r24
 36e:	96 95       	lsr	r25
 370:	87 95       	ror	r24
 372:	9c 01       	movw	r18, r24
 374:	22 0f       	add	r18, r18
 376:	33 1f       	adc	r19, r19
 378:	88 0f       	add	r24, r24
 37a:	99 1f       	adc	r25, r25
 37c:	88 0f       	add	r24, r24
 37e:	99 1f       	adc	r25, r25
 380:	88 0f       	add	r24, r24
 382:	99 1f       	adc	r25, r25
 384:	82 0f       	add	r24, r18
 386:	93 1f       	adc	r25, r19
 388:	9a 01       	movw	r18, r20
 38a:	28 1b       	sub	r18, r24
 38c:	39 0b       	sbc	r19, r25
 38e:	c9 01       	movw	r24, r18
 390:	e1 e0       	ldi	r30, 0x01	; 1
 392:	f0 e0       	ldi	r31, 0x00	; 0
 394:	ec 0f       	add	r30, r28
 396:	fd 1f       	adc	r31, r29
 398:	e1 0f       	add	r30, r17
 39a:	f1 1d       	adc	r31, r1
 39c:	80 5d       	subi	r24, 0xD0	; 208
 39e:	80 83       	st	Z, r24
		valor /=10; //pega o inteiro da divisão por 10
 3a0:	9a 01       	movw	r18, r20
 3a2:	0e 94 f3 04 	call	0x9e6	; 0x9e6 <__umulhisi3>
 3a6:	ac 01       	movw	r20, r24
 3a8:	56 95       	lsr	r21
 3aa:	47 95       	ror	r20
 3ac:	56 95       	lsr	r21
 3ae:	47 95       	ror	r20
 3b0:	56 95       	lsr	r21
 3b2:	47 95       	ror	r20
		n++;
 3b4:	1f 5f       	subi	r17, 0xFF	; 255
	}while (valor!=0);
 3b6:	41 15       	cp	r20, r1
 3b8:	51 05       	cpc	r21, r1
 3ba:	81 f6       	brne	.-96     	; 0x35c <envia_int+0x32>
 3bc:	0d c0       	rjmp	.+26     	; 0x3d8 <envia_int+0xae>
	for(;n!=0;n--){
		USART_Transmite(disp[n-1]);
 3be:	e1 2f       	mov	r30, r17
 3c0:	f0 e0       	ldi	r31, 0x00	; 0
 3c2:	31 97       	sbiw	r30, 0x01	; 1
 3c4:	81 e0       	ldi	r24, 0x01	; 1
 3c6:	90 e0       	ldi	r25, 0x00	; 0
 3c8:	8c 0f       	add	r24, r28
 3ca:	9d 1f       	adc	r25, r29
 3cc:	e8 0f       	add	r30, r24
 3ce:	f9 1f       	adc	r31, r25
 3d0:	80 81       	ld	r24, Z
 3d2:	0e 94 81 01 	call	0x302	; 0x302 <USART_Transmite>
	{
		disp[n] = (valor%10) + '0'; //pega o resto da divisão por 10
		valor /=10; //pega o inteiro da divisão por 10
		n++;
	}while (valor!=0);
	for(;n!=0;n--){
 3d6:	11 50       	subi	r17, 0x01	; 1
 3d8:	11 11       	cpse	r17, r1
 3da:	f1 cf       	rjmp	.-30     	; 0x3be <envia_int+0x94>
		USART_Transmite(disp[n-1]);
	}
}
 3dc:	28 96       	adiw	r28, 0x08	; 8
 3de:	0f b6       	in	r0, 0x3f	; 63
 3e0:	f8 94       	cli
 3e2:	de bf       	out	0x3e, r29	; 62
 3e4:	0f be       	out	0x3f, r0	; 63
 3e6:	cd bf       	out	0x3d, r28	; 61
 3e8:	df 91       	pop	r29
 3ea:	cf 91       	pop	r28
 3ec:	1f 91       	pop	r17
 3ee:	08 95       	ret

000003f0 <envia_double>:

void envia_double(double n){
 3f0:	8f 92       	push	r8
 3f2:	9f 92       	push	r9
 3f4:	af 92       	push	r10
 3f6:	bf 92       	push	r11
 3f8:	cf 92       	push	r12
 3fa:	df 92       	push	r13
 3fc:	ef 92       	push	r14
 3fe:	ff 92       	push	r15
 400:	6b 01       	movw	r12, r22
 402:	7c 01       	movw	r14, r24
	int i;
	int dec;
	i = n/1;
 404:	0e 94 07 03 	call	0x60e	; 0x60e <__fixsfsi>
 408:	4b 01       	movw	r8, r22
 40a:	5c 01       	movw	r10, r24
	dec = n*100;dec = dec%100;
 40c:	20 e0       	ldi	r18, 0x00	; 0
 40e:	30 e0       	ldi	r19, 0x00	; 0
 410:	48 ec       	ldi	r20, 0xC8	; 200
 412:	52 e4       	ldi	r21, 0x42	; 66
 414:	c7 01       	movw	r24, r14
 416:	b6 01       	movw	r22, r12
 418:	0e 94 1b 04 	call	0x836	; 0x836 <__mulsf3>
 41c:	0e 94 07 03 	call	0x60e	; 0x60e <__fixsfsi>
 420:	cb 01       	movw	r24, r22
 422:	64 e6       	ldi	r22, 0x64	; 100
 424:	70 e0       	ldi	r23, 0x00	; 0
 426:	0e 94 bd 04 	call	0x97a	; 0x97a <__divmodhi4>
 42a:	7c 01       	movw	r14, r24
	envia_int(i);
 42c:	c4 01       	movw	r24, r8
 42e:	0e 94 95 01 	call	0x32a	; 0x32a <envia_int>
	USART_Transmite('.');
 432:	8e e2       	ldi	r24, 0x2E	; 46
 434:	0e 94 81 01 	call	0x302	; 0x302 <USART_Transmite>
	envia_int(dec);
 438:	c7 01       	movw	r24, r14
 43a:	0e 94 95 01 	call	0x32a	; 0x32a <envia_int>
}
 43e:	ff 90       	pop	r15
 440:	ef 90       	pop	r14
 442:	df 90       	pop	r13
 444:	cf 90       	pop	r12
 446:	bf 90       	pop	r11
 448:	af 90       	pop	r10
 44a:	9f 90       	pop	r9
 44c:	8f 90       	pop	r8
 44e:	08 95       	ret

00000450 <__subsf3>:
 450:	50 58       	subi	r21, 0x80	; 128

00000452 <__addsf3>:
 452:	bb 27       	eor	r27, r27
 454:	aa 27       	eor	r26, r26
 456:	0e 94 40 02 	call	0x480	; 0x480 <__addsf3x>
 45a:	0c 94 91 03 	jmp	0x722	; 0x722 <__fp_round>
 45e:	0e 94 83 03 	call	0x706	; 0x706 <__fp_pscA>
 462:	38 f0       	brcs	.+14     	; 0x472 <__addsf3+0x20>
 464:	0e 94 8a 03 	call	0x714	; 0x714 <__fp_pscB>
 468:	20 f0       	brcs	.+8      	; 0x472 <__addsf3+0x20>
 46a:	39 f4       	brne	.+14     	; 0x47a <__addsf3+0x28>
 46c:	9f 3f       	cpi	r25, 0xFF	; 255
 46e:	19 f4       	brne	.+6      	; 0x476 <__addsf3+0x24>
 470:	26 f4       	brtc	.+8      	; 0x47a <__addsf3+0x28>
 472:	0c 94 80 03 	jmp	0x700	; 0x700 <__fp_nan>
 476:	0e f4       	brtc	.+2      	; 0x47a <__addsf3+0x28>
 478:	e0 95       	com	r30
 47a:	e7 fb       	bst	r30, 7
 47c:	0c 94 7a 03 	jmp	0x6f4	; 0x6f4 <__fp_inf>

00000480 <__addsf3x>:
 480:	e9 2f       	mov	r30, r25
 482:	0e 94 a2 03 	call	0x744	; 0x744 <__fp_split3>
 486:	58 f3       	brcs	.-42     	; 0x45e <__addsf3+0xc>
 488:	ba 17       	cp	r27, r26
 48a:	62 07       	cpc	r22, r18
 48c:	73 07       	cpc	r23, r19
 48e:	84 07       	cpc	r24, r20
 490:	95 07       	cpc	r25, r21
 492:	20 f0       	brcs	.+8      	; 0x49c <__addsf3x+0x1c>
 494:	79 f4       	brne	.+30     	; 0x4b4 <__addsf3x+0x34>
 496:	a6 f5       	brtc	.+104    	; 0x500 <__addsf3x+0x80>
 498:	0c 94 c4 03 	jmp	0x788	; 0x788 <__fp_zero>
 49c:	0e f4       	brtc	.+2      	; 0x4a0 <__addsf3x+0x20>
 49e:	e0 95       	com	r30
 4a0:	0b 2e       	mov	r0, r27
 4a2:	ba 2f       	mov	r27, r26
 4a4:	a0 2d       	mov	r26, r0
 4a6:	0b 01       	movw	r0, r22
 4a8:	b9 01       	movw	r22, r18
 4aa:	90 01       	movw	r18, r0
 4ac:	0c 01       	movw	r0, r24
 4ae:	ca 01       	movw	r24, r20
 4b0:	a0 01       	movw	r20, r0
 4b2:	11 24       	eor	r1, r1
 4b4:	ff 27       	eor	r31, r31
 4b6:	59 1b       	sub	r21, r25
 4b8:	99 f0       	breq	.+38     	; 0x4e0 <__addsf3x+0x60>
 4ba:	59 3f       	cpi	r21, 0xF9	; 249
 4bc:	50 f4       	brcc	.+20     	; 0x4d2 <__addsf3x+0x52>
 4be:	50 3e       	cpi	r21, 0xE0	; 224
 4c0:	68 f1       	brcs	.+90     	; 0x51c <__addsf3x+0x9c>
 4c2:	1a 16       	cp	r1, r26
 4c4:	f0 40       	sbci	r31, 0x00	; 0
 4c6:	a2 2f       	mov	r26, r18
 4c8:	23 2f       	mov	r18, r19
 4ca:	34 2f       	mov	r19, r20
 4cc:	44 27       	eor	r20, r20
 4ce:	58 5f       	subi	r21, 0xF8	; 248
 4d0:	f3 cf       	rjmp	.-26     	; 0x4b8 <__addsf3x+0x38>
 4d2:	46 95       	lsr	r20
 4d4:	37 95       	ror	r19
 4d6:	27 95       	ror	r18
 4d8:	a7 95       	ror	r26
 4da:	f0 40       	sbci	r31, 0x00	; 0
 4dc:	53 95       	inc	r21
 4de:	c9 f7       	brne	.-14     	; 0x4d2 <__addsf3x+0x52>
 4e0:	7e f4       	brtc	.+30     	; 0x500 <__addsf3x+0x80>
 4e2:	1f 16       	cp	r1, r31
 4e4:	ba 0b       	sbc	r27, r26
 4e6:	62 0b       	sbc	r22, r18
 4e8:	73 0b       	sbc	r23, r19
 4ea:	84 0b       	sbc	r24, r20
 4ec:	ba f0       	brmi	.+46     	; 0x51c <__addsf3x+0x9c>
 4ee:	91 50       	subi	r25, 0x01	; 1
 4f0:	a1 f0       	breq	.+40     	; 0x51a <__addsf3x+0x9a>
 4f2:	ff 0f       	add	r31, r31
 4f4:	bb 1f       	adc	r27, r27
 4f6:	66 1f       	adc	r22, r22
 4f8:	77 1f       	adc	r23, r23
 4fa:	88 1f       	adc	r24, r24
 4fc:	c2 f7       	brpl	.-16     	; 0x4ee <__addsf3x+0x6e>
 4fe:	0e c0       	rjmp	.+28     	; 0x51c <__addsf3x+0x9c>
 500:	ba 0f       	add	r27, r26
 502:	62 1f       	adc	r22, r18
 504:	73 1f       	adc	r23, r19
 506:	84 1f       	adc	r24, r20
 508:	48 f4       	brcc	.+18     	; 0x51c <__addsf3x+0x9c>
 50a:	87 95       	ror	r24
 50c:	77 95       	ror	r23
 50e:	67 95       	ror	r22
 510:	b7 95       	ror	r27
 512:	f7 95       	ror	r31
 514:	9e 3f       	cpi	r25, 0xFE	; 254
 516:	08 f0       	brcs	.+2      	; 0x51a <__addsf3x+0x9a>
 518:	b0 cf       	rjmp	.-160    	; 0x47a <__addsf3+0x28>
 51a:	93 95       	inc	r25
 51c:	88 0f       	add	r24, r24
 51e:	08 f0       	brcs	.+2      	; 0x522 <__addsf3x+0xa2>
 520:	99 27       	eor	r25, r25
 522:	ee 0f       	add	r30, r30
 524:	97 95       	ror	r25
 526:	87 95       	ror	r24
 528:	08 95       	ret

0000052a <__divsf3>:
 52a:	0e 94 a9 02 	call	0x552	; 0x552 <__divsf3x>
 52e:	0c 94 91 03 	jmp	0x722	; 0x722 <__fp_round>
 532:	0e 94 8a 03 	call	0x714	; 0x714 <__fp_pscB>
 536:	58 f0       	brcs	.+22     	; 0x54e <__divsf3+0x24>
 538:	0e 94 83 03 	call	0x706	; 0x706 <__fp_pscA>
 53c:	40 f0       	brcs	.+16     	; 0x54e <__divsf3+0x24>
 53e:	29 f4       	brne	.+10     	; 0x54a <__divsf3+0x20>
 540:	5f 3f       	cpi	r21, 0xFF	; 255
 542:	29 f0       	breq	.+10     	; 0x54e <__divsf3+0x24>
 544:	0c 94 7a 03 	jmp	0x6f4	; 0x6f4 <__fp_inf>
 548:	51 11       	cpse	r21, r1
 54a:	0c 94 c5 03 	jmp	0x78a	; 0x78a <__fp_szero>
 54e:	0c 94 80 03 	jmp	0x700	; 0x700 <__fp_nan>

00000552 <__divsf3x>:
 552:	0e 94 a2 03 	call	0x744	; 0x744 <__fp_split3>
 556:	68 f3       	brcs	.-38     	; 0x532 <__divsf3+0x8>

00000558 <__divsf3_pse>:
 558:	99 23       	and	r25, r25
 55a:	b1 f3       	breq	.-20     	; 0x548 <__divsf3+0x1e>
 55c:	55 23       	and	r21, r21
 55e:	91 f3       	breq	.-28     	; 0x544 <__divsf3+0x1a>
 560:	95 1b       	sub	r25, r21
 562:	55 0b       	sbc	r21, r21
 564:	bb 27       	eor	r27, r27
 566:	aa 27       	eor	r26, r26
 568:	62 17       	cp	r22, r18
 56a:	73 07       	cpc	r23, r19
 56c:	84 07       	cpc	r24, r20
 56e:	38 f0       	brcs	.+14     	; 0x57e <__divsf3_pse+0x26>
 570:	9f 5f       	subi	r25, 0xFF	; 255
 572:	5f 4f       	sbci	r21, 0xFF	; 255
 574:	22 0f       	add	r18, r18
 576:	33 1f       	adc	r19, r19
 578:	44 1f       	adc	r20, r20
 57a:	aa 1f       	adc	r26, r26
 57c:	a9 f3       	breq	.-22     	; 0x568 <__divsf3_pse+0x10>
 57e:	35 d0       	rcall	.+106    	; 0x5ea <__divsf3_pse+0x92>
 580:	0e 2e       	mov	r0, r30
 582:	3a f0       	brmi	.+14     	; 0x592 <__divsf3_pse+0x3a>
 584:	e0 e8       	ldi	r30, 0x80	; 128
 586:	32 d0       	rcall	.+100    	; 0x5ec <__divsf3_pse+0x94>
 588:	91 50       	subi	r25, 0x01	; 1
 58a:	50 40       	sbci	r21, 0x00	; 0
 58c:	e6 95       	lsr	r30
 58e:	00 1c       	adc	r0, r0
 590:	ca f7       	brpl	.-14     	; 0x584 <__divsf3_pse+0x2c>
 592:	2b d0       	rcall	.+86     	; 0x5ea <__divsf3_pse+0x92>
 594:	fe 2f       	mov	r31, r30
 596:	29 d0       	rcall	.+82     	; 0x5ea <__divsf3_pse+0x92>
 598:	66 0f       	add	r22, r22
 59a:	77 1f       	adc	r23, r23
 59c:	88 1f       	adc	r24, r24
 59e:	bb 1f       	adc	r27, r27
 5a0:	26 17       	cp	r18, r22
 5a2:	37 07       	cpc	r19, r23
 5a4:	48 07       	cpc	r20, r24
 5a6:	ab 07       	cpc	r26, r27
 5a8:	b0 e8       	ldi	r27, 0x80	; 128
 5aa:	09 f0       	breq	.+2      	; 0x5ae <__divsf3_pse+0x56>
 5ac:	bb 0b       	sbc	r27, r27
 5ae:	80 2d       	mov	r24, r0
 5b0:	bf 01       	movw	r22, r30
 5b2:	ff 27       	eor	r31, r31
 5b4:	93 58       	subi	r25, 0x83	; 131
 5b6:	5f 4f       	sbci	r21, 0xFF	; 255
 5b8:	3a f0       	brmi	.+14     	; 0x5c8 <__divsf3_pse+0x70>
 5ba:	9e 3f       	cpi	r25, 0xFE	; 254
 5bc:	51 05       	cpc	r21, r1
 5be:	78 f0       	brcs	.+30     	; 0x5de <__divsf3_pse+0x86>
 5c0:	0c 94 7a 03 	jmp	0x6f4	; 0x6f4 <__fp_inf>
 5c4:	0c 94 c5 03 	jmp	0x78a	; 0x78a <__fp_szero>
 5c8:	5f 3f       	cpi	r21, 0xFF	; 255
 5ca:	e4 f3       	brlt	.-8      	; 0x5c4 <__divsf3_pse+0x6c>
 5cc:	98 3e       	cpi	r25, 0xE8	; 232
 5ce:	d4 f3       	brlt	.-12     	; 0x5c4 <__divsf3_pse+0x6c>
 5d0:	86 95       	lsr	r24
 5d2:	77 95       	ror	r23
 5d4:	67 95       	ror	r22
 5d6:	b7 95       	ror	r27
 5d8:	f7 95       	ror	r31
 5da:	9f 5f       	subi	r25, 0xFF	; 255
 5dc:	c9 f7       	brne	.-14     	; 0x5d0 <__divsf3_pse+0x78>
 5de:	88 0f       	add	r24, r24
 5e0:	91 1d       	adc	r25, r1
 5e2:	96 95       	lsr	r25
 5e4:	87 95       	ror	r24
 5e6:	97 f9       	bld	r25, 7
 5e8:	08 95       	ret
 5ea:	e1 e0       	ldi	r30, 0x01	; 1
 5ec:	66 0f       	add	r22, r22
 5ee:	77 1f       	adc	r23, r23
 5f0:	88 1f       	adc	r24, r24
 5f2:	bb 1f       	adc	r27, r27
 5f4:	62 17       	cp	r22, r18
 5f6:	73 07       	cpc	r23, r19
 5f8:	84 07       	cpc	r24, r20
 5fa:	ba 07       	cpc	r27, r26
 5fc:	20 f0       	brcs	.+8      	; 0x606 <__divsf3_pse+0xae>
 5fe:	62 1b       	sub	r22, r18
 600:	73 0b       	sbc	r23, r19
 602:	84 0b       	sbc	r24, r20
 604:	ba 0b       	sbc	r27, r26
 606:	ee 1f       	adc	r30, r30
 608:	88 f7       	brcc	.-30     	; 0x5ec <__divsf3_pse+0x94>
 60a:	e0 95       	com	r30
 60c:	08 95       	ret

0000060e <__fixsfsi>:
 60e:	0e 94 0e 03 	call	0x61c	; 0x61c <__fixunssfsi>
 612:	68 94       	set
 614:	b1 11       	cpse	r27, r1
 616:	0c 94 c5 03 	jmp	0x78a	; 0x78a <__fp_szero>
 61a:	08 95       	ret

0000061c <__fixunssfsi>:
 61c:	0e 94 aa 03 	call	0x754	; 0x754 <__fp_splitA>
 620:	88 f0       	brcs	.+34     	; 0x644 <__fixunssfsi+0x28>
 622:	9f 57       	subi	r25, 0x7F	; 127
 624:	98 f0       	brcs	.+38     	; 0x64c <__fixunssfsi+0x30>
 626:	b9 2f       	mov	r27, r25
 628:	99 27       	eor	r25, r25
 62a:	b7 51       	subi	r27, 0x17	; 23
 62c:	b0 f0       	brcs	.+44     	; 0x65a <__fixunssfsi+0x3e>
 62e:	e1 f0       	breq	.+56     	; 0x668 <__fixunssfsi+0x4c>
 630:	66 0f       	add	r22, r22
 632:	77 1f       	adc	r23, r23
 634:	88 1f       	adc	r24, r24
 636:	99 1f       	adc	r25, r25
 638:	1a f0       	brmi	.+6      	; 0x640 <__fixunssfsi+0x24>
 63a:	ba 95       	dec	r27
 63c:	c9 f7       	brne	.-14     	; 0x630 <__fixunssfsi+0x14>
 63e:	14 c0       	rjmp	.+40     	; 0x668 <__fixunssfsi+0x4c>
 640:	b1 30       	cpi	r27, 0x01	; 1
 642:	91 f0       	breq	.+36     	; 0x668 <__fixunssfsi+0x4c>
 644:	0e 94 c4 03 	call	0x788	; 0x788 <__fp_zero>
 648:	b1 e0       	ldi	r27, 0x01	; 1
 64a:	08 95       	ret
 64c:	0c 94 c4 03 	jmp	0x788	; 0x788 <__fp_zero>
 650:	67 2f       	mov	r22, r23
 652:	78 2f       	mov	r23, r24
 654:	88 27       	eor	r24, r24
 656:	b8 5f       	subi	r27, 0xF8	; 248
 658:	39 f0       	breq	.+14     	; 0x668 <__fixunssfsi+0x4c>
 65a:	b9 3f       	cpi	r27, 0xF9	; 249
 65c:	cc f3       	brlt	.-14     	; 0x650 <__fixunssfsi+0x34>
 65e:	86 95       	lsr	r24
 660:	77 95       	ror	r23
 662:	67 95       	ror	r22
 664:	b3 95       	inc	r27
 666:	d9 f7       	brne	.-10     	; 0x65e <__fixunssfsi+0x42>
 668:	3e f4       	brtc	.+14     	; 0x678 <__fixunssfsi+0x5c>
 66a:	90 95       	com	r25
 66c:	80 95       	com	r24
 66e:	70 95       	com	r23
 670:	61 95       	neg	r22
 672:	7f 4f       	sbci	r23, 0xFF	; 255
 674:	8f 4f       	sbci	r24, 0xFF	; 255
 676:	9f 4f       	sbci	r25, 0xFF	; 255
 678:	08 95       	ret

0000067a <__floatunsisf>:
 67a:	e8 94       	clt
 67c:	09 c0       	rjmp	.+18     	; 0x690 <__floatsisf+0x12>

0000067e <__floatsisf>:
 67e:	97 fb       	bst	r25, 7
 680:	3e f4       	brtc	.+14     	; 0x690 <__floatsisf+0x12>
 682:	90 95       	com	r25
 684:	80 95       	com	r24
 686:	70 95       	com	r23
 688:	61 95       	neg	r22
 68a:	7f 4f       	sbci	r23, 0xFF	; 255
 68c:	8f 4f       	sbci	r24, 0xFF	; 255
 68e:	9f 4f       	sbci	r25, 0xFF	; 255
 690:	99 23       	and	r25, r25
 692:	a9 f0       	breq	.+42     	; 0x6be <__floatsisf+0x40>
 694:	f9 2f       	mov	r31, r25
 696:	96 e9       	ldi	r25, 0x96	; 150
 698:	bb 27       	eor	r27, r27
 69a:	93 95       	inc	r25
 69c:	f6 95       	lsr	r31
 69e:	87 95       	ror	r24
 6a0:	77 95       	ror	r23
 6a2:	67 95       	ror	r22
 6a4:	b7 95       	ror	r27
 6a6:	f1 11       	cpse	r31, r1
 6a8:	f8 cf       	rjmp	.-16     	; 0x69a <__floatsisf+0x1c>
 6aa:	fa f4       	brpl	.+62     	; 0x6ea <__floatsisf+0x6c>
 6ac:	bb 0f       	add	r27, r27
 6ae:	11 f4       	brne	.+4      	; 0x6b4 <__floatsisf+0x36>
 6b0:	60 ff       	sbrs	r22, 0
 6b2:	1b c0       	rjmp	.+54     	; 0x6ea <__floatsisf+0x6c>
 6b4:	6f 5f       	subi	r22, 0xFF	; 255
 6b6:	7f 4f       	sbci	r23, 0xFF	; 255
 6b8:	8f 4f       	sbci	r24, 0xFF	; 255
 6ba:	9f 4f       	sbci	r25, 0xFF	; 255
 6bc:	16 c0       	rjmp	.+44     	; 0x6ea <__floatsisf+0x6c>
 6be:	88 23       	and	r24, r24
 6c0:	11 f0       	breq	.+4      	; 0x6c6 <__floatsisf+0x48>
 6c2:	96 e9       	ldi	r25, 0x96	; 150
 6c4:	11 c0       	rjmp	.+34     	; 0x6e8 <__floatsisf+0x6a>
 6c6:	77 23       	and	r23, r23
 6c8:	21 f0       	breq	.+8      	; 0x6d2 <__floatsisf+0x54>
 6ca:	9e e8       	ldi	r25, 0x8E	; 142
 6cc:	87 2f       	mov	r24, r23
 6ce:	76 2f       	mov	r23, r22
 6d0:	05 c0       	rjmp	.+10     	; 0x6dc <__floatsisf+0x5e>
 6d2:	66 23       	and	r22, r22
 6d4:	71 f0       	breq	.+28     	; 0x6f2 <__floatsisf+0x74>
 6d6:	96 e8       	ldi	r25, 0x86	; 134
 6d8:	86 2f       	mov	r24, r22
 6da:	70 e0       	ldi	r23, 0x00	; 0
 6dc:	60 e0       	ldi	r22, 0x00	; 0
 6de:	2a f0       	brmi	.+10     	; 0x6ea <__floatsisf+0x6c>
 6e0:	9a 95       	dec	r25
 6e2:	66 0f       	add	r22, r22
 6e4:	77 1f       	adc	r23, r23
 6e6:	88 1f       	adc	r24, r24
 6e8:	da f7       	brpl	.-10     	; 0x6e0 <__floatsisf+0x62>
 6ea:	88 0f       	add	r24, r24
 6ec:	96 95       	lsr	r25
 6ee:	87 95       	ror	r24
 6f0:	97 f9       	bld	r25, 7
 6f2:	08 95       	ret

000006f4 <__fp_inf>:
 6f4:	97 f9       	bld	r25, 7
 6f6:	9f 67       	ori	r25, 0x7F	; 127
 6f8:	80 e8       	ldi	r24, 0x80	; 128
 6fa:	70 e0       	ldi	r23, 0x00	; 0
 6fc:	60 e0       	ldi	r22, 0x00	; 0
 6fe:	08 95       	ret

00000700 <__fp_nan>:
 700:	9f ef       	ldi	r25, 0xFF	; 255
 702:	80 ec       	ldi	r24, 0xC0	; 192
 704:	08 95       	ret

00000706 <__fp_pscA>:
 706:	00 24       	eor	r0, r0
 708:	0a 94       	dec	r0
 70a:	16 16       	cp	r1, r22
 70c:	17 06       	cpc	r1, r23
 70e:	18 06       	cpc	r1, r24
 710:	09 06       	cpc	r0, r25
 712:	08 95       	ret

00000714 <__fp_pscB>:
 714:	00 24       	eor	r0, r0
 716:	0a 94       	dec	r0
 718:	12 16       	cp	r1, r18
 71a:	13 06       	cpc	r1, r19
 71c:	14 06       	cpc	r1, r20
 71e:	05 06       	cpc	r0, r21
 720:	08 95       	ret

00000722 <__fp_round>:
 722:	09 2e       	mov	r0, r25
 724:	03 94       	inc	r0
 726:	00 0c       	add	r0, r0
 728:	11 f4       	brne	.+4      	; 0x72e <__fp_round+0xc>
 72a:	88 23       	and	r24, r24
 72c:	52 f0       	brmi	.+20     	; 0x742 <__fp_round+0x20>
 72e:	bb 0f       	add	r27, r27
 730:	40 f4       	brcc	.+16     	; 0x742 <__fp_round+0x20>
 732:	bf 2b       	or	r27, r31
 734:	11 f4       	brne	.+4      	; 0x73a <__fp_round+0x18>
 736:	60 ff       	sbrs	r22, 0
 738:	04 c0       	rjmp	.+8      	; 0x742 <__fp_round+0x20>
 73a:	6f 5f       	subi	r22, 0xFF	; 255
 73c:	7f 4f       	sbci	r23, 0xFF	; 255
 73e:	8f 4f       	sbci	r24, 0xFF	; 255
 740:	9f 4f       	sbci	r25, 0xFF	; 255
 742:	08 95       	ret

00000744 <__fp_split3>:
 744:	57 fd       	sbrc	r21, 7
 746:	90 58       	subi	r25, 0x80	; 128
 748:	44 0f       	add	r20, r20
 74a:	55 1f       	adc	r21, r21
 74c:	59 f0       	breq	.+22     	; 0x764 <__fp_splitA+0x10>
 74e:	5f 3f       	cpi	r21, 0xFF	; 255
 750:	71 f0       	breq	.+28     	; 0x76e <__fp_splitA+0x1a>
 752:	47 95       	ror	r20

00000754 <__fp_splitA>:
 754:	88 0f       	add	r24, r24
 756:	97 fb       	bst	r25, 7
 758:	99 1f       	adc	r25, r25
 75a:	61 f0       	breq	.+24     	; 0x774 <__fp_splitA+0x20>
 75c:	9f 3f       	cpi	r25, 0xFF	; 255
 75e:	79 f0       	breq	.+30     	; 0x77e <__fp_splitA+0x2a>
 760:	87 95       	ror	r24
 762:	08 95       	ret
 764:	12 16       	cp	r1, r18
 766:	13 06       	cpc	r1, r19
 768:	14 06       	cpc	r1, r20
 76a:	55 1f       	adc	r21, r21
 76c:	f2 cf       	rjmp	.-28     	; 0x752 <__fp_split3+0xe>
 76e:	46 95       	lsr	r20
 770:	f1 df       	rcall	.-30     	; 0x754 <__fp_splitA>
 772:	08 c0       	rjmp	.+16     	; 0x784 <__fp_splitA+0x30>
 774:	16 16       	cp	r1, r22
 776:	17 06       	cpc	r1, r23
 778:	18 06       	cpc	r1, r24
 77a:	99 1f       	adc	r25, r25
 77c:	f1 cf       	rjmp	.-30     	; 0x760 <__fp_splitA+0xc>
 77e:	86 95       	lsr	r24
 780:	71 05       	cpc	r23, r1
 782:	61 05       	cpc	r22, r1
 784:	08 94       	sec
 786:	08 95       	ret

00000788 <__fp_zero>:
 788:	e8 94       	clt

0000078a <__fp_szero>:
 78a:	bb 27       	eor	r27, r27
 78c:	66 27       	eor	r22, r22
 78e:	77 27       	eor	r23, r23
 790:	cb 01       	movw	r24, r22
 792:	97 f9       	bld	r25, 7
 794:	08 95       	ret
 796:	16 f0       	brts	.+4      	; 0x79c <__fp_szero+0x12>
 798:	0c 94 88 04 	jmp	0x910	; 0x910 <__fp_mpack>
 79c:	0c 94 80 03 	jmp	0x700	; 0x700 <__fp_nan>
 7a0:	68 94       	set
 7a2:	0c 94 7a 03 	jmp	0x6f4	; 0x6f4 <__fp_inf>

000007a6 <log>:
 7a6:	0e 94 aa 03 	call	0x754	; 0x754 <__fp_splitA>
 7aa:	a8 f3       	brcs	.-22     	; 0x796 <__fp_szero+0xc>
 7ac:	99 23       	and	r25, r25
 7ae:	c1 f3       	breq	.-16     	; 0x7a0 <__fp_szero+0x16>
 7b0:	ae f3       	brts	.-22     	; 0x79c <__fp_szero+0x12>
 7b2:	df 93       	push	r29
 7b4:	cf 93       	push	r28
 7b6:	1f 93       	push	r17
 7b8:	0f 93       	push	r16
 7ba:	ff 92       	push	r15
 7bc:	c9 2f       	mov	r28, r25
 7be:	dd 27       	eor	r29, r29
 7c0:	88 23       	and	r24, r24
 7c2:	2a f0       	brmi	.+10     	; 0x7ce <log+0x28>
 7c4:	21 97       	sbiw	r28, 0x01	; 1
 7c6:	66 0f       	add	r22, r22
 7c8:	77 1f       	adc	r23, r23
 7ca:	88 1f       	adc	r24, r24
 7cc:	da f7       	brpl	.-10     	; 0x7c4 <log+0x1e>
 7ce:	20 e0       	ldi	r18, 0x00	; 0
 7d0:	30 e0       	ldi	r19, 0x00	; 0
 7d2:	40 e8       	ldi	r20, 0x80	; 128
 7d4:	5f eb       	ldi	r21, 0xBF	; 191
 7d6:	9f e3       	ldi	r25, 0x3F	; 63
 7d8:	88 39       	cpi	r24, 0x98	; 152
 7da:	20 f0       	brcs	.+8      	; 0x7e4 <log+0x3e>
 7dc:	80 3e       	cpi	r24, 0xE0	; 224
 7de:	38 f0       	brcs	.+14     	; 0x7ee <log+0x48>
 7e0:	21 96       	adiw	r28, 0x01	; 1
 7e2:	8f 77       	andi	r24, 0x7F	; 127
 7e4:	0e 94 29 02 	call	0x452	; 0x452 <__addsf3>
 7e8:	e8 e6       	ldi	r30, 0x68	; 104
 7ea:	f0 e0       	ldi	r31, 0x00	; 0
 7ec:	04 c0       	rjmp	.+8      	; 0x7f6 <log+0x50>
 7ee:	0e 94 29 02 	call	0x452	; 0x452 <__addsf3>
 7f2:	e5 e9       	ldi	r30, 0x95	; 149
 7f4:	f0 e0       	ldi	r31, 0x00	; 0
 7f6:	0e 94 96 04 	call	0x92c	; 0x92c <__fp_powser>
 7fa:	8b 01       	movw	r16, r22
 7fc:	be 01       	movw	r22, r28
 7fe:	ec 01       	movw	r28, r24
 800:	fb 2e       	mov	r15, r27
 802:	6f 57       	subi	r22, 0x7F	; 127
 804:	71 09       	sbc	r23, r1
 806:	75 95       	asr	r23
 808:	77 1f       	adc	r23, r23
 80a:	88 0b       	sbc	r24, r24
 80c:	99 0b       	sbc	r25, r25
 80e:	0e 94 3f 03 	call	0x67e	; 0x67e <__floatsisf>
 812:	28 e1       	ldi	r18, 0x18	; 24
 814:	32 e7       	ldi	r19, 0x72	; 114
 816:	41 e3       	ldi	r20, 0x31	; 49
 818:	5f e3       	ldi	r21, 0x3F	; 63
 81a:	0e 94 2e 04 	call	0x85c	; 0x85c <__mulsf3x>
 81e:	af 2d       	mov	r26, r15
 820:	98 01       	movw	r18, r16
 822:	ae 01       	movw	r20, r28
 824:	ff 90       	pop	r15
 826:	0f 91       	pop	r16
 828:	1f 91       	pop	r17
 82a:	cf 91       	pop	r28
 82c:	df 91       	pop	r29
 82e:	0e 94 40 02 	call	0x480	; 0x480 <__addsf3x>
 832:	0c 94 91 03 	jmp	0x722	; 0x722 <__fp_round>

00000836 <__mulsf3>:
 836:	0e 94 2e 04 	call	0x85c	; 0x85c <__mulsf3x>
 83a:	0c 94 91 03 	jmp	0x722	; 0x722 <__fp_round>
 83e:	0e 94 83 03 	call	0x706	; 0x706 <__fp_pscA>
 842:	38 f0       	brcs	.+14     	; 0x852 <__mulsf3+0x1c>
 844:	0e 94 8a 03 	call	0x714	; 0x714 <__fp_pscB>
 848:	20 f0       	brcs	.+8      	; 0x852 <__mulsf3+0x1c>
 84a:	95 23       	and	r25, r21
 84c:	11 f0       	breq	.+4      	; 0x852 <__mulsf3+0x1c>
 84e:	0c 94 7a 03 	jmp	0x6f4	; 0x6f4 <__fp_inf>
 852:	0c 94 80 03 	jmp	0x700	; 0x700 <__fp_nan>
 856:	11 24       	eor	r1, r1
 858:	0c 94 c5 03 	jmp	0x78a	; 0x78a <__fp_szero>

0000085c <__mulsf3x>:
 85c:	0e 94 a2 03 	call	0x744	; 0x744 <__fp_split3>
 860:	70 f3       	brcs	.-36     	; 0x83e <__mulsf3+0x8>

00000862 <__mulsf3_pse>:
 862:	95 9f       	mul	r25, r21
 864:	c1 f3       	breq	.-16     	; 0x856 <__mulsf3+0x20>
 866:	95 0f       	add	r25, r21
 868:	50 e0       	ldi	r21, 0x00	; 0
 86a:	55 1f       	adc	r21, r21
 86c:	62 9f       	mul	r22, r18
 86e:	f0 01       	movw	r30, r0
 870:	72 9f       	mul	r23, r18
 872:	bb 27       	eor	r27, r27
 874:	f0 0d       	add	r31, r0
 876:	b1 1d       	adc	r27, r1
 878:	63 9f       	mul	r22, r19
 87a:	aa 27       	eor	r26, r26
 87c:	f0 0d       	add	r31, r0
 87e:	b1 1d       	adc	r27, r1
 880:	aa 1f       	adc	r26, r26
 882:	64 9f       	mul	r22, r20
 884:	66 27       	eor	r22, r22
 886:	b0 0d       	add	r27, r0
 888:	a1 1d       	adc	r26, r1
 88a:	66 1f       	adc	r22, r22
 88c:	82 9f       	mul	r24, r18
 88e:	22 27       	eor	r18, r18
 890:	b0 0d       	add	r27, r0
 892:	a1 1d       	adc	r26, r1
 894:	62 1f       	adc	r22, r18
 896:	73 9f       	mul	r23, r19
 898:	b0 0d       	add	r27, r0
 89a:	a1 1d       	adc	r26, r1
 89c:	62 1f       	adc	r22, r18
 89e:	83 9f       	mul	r24, r19
 8a0:	a0 0d       	add	r26, r0
 8a2:	61 1d       	adc	r22, r1
 8a4:	22 1f       	adc	r18, r18
 8a6:	74 9f       	mul	r23, r20
 8a8:	33 27       	eor	r19, r19
 8aa:	a0 0d       	add	r26, r0
 8ac:	61 1d       	adc	r22, r1
 8ae:	23 1f       	adc	r18, r19
 8b0:	84 9f       	mul	r24, r20
 8b2:	60 0d       	add	r22, r0
 8b4:	21 1d       	adc	r18, r1
 8b6:	82 2f       	mov	r24, r18
 8b8:	76 2f       	mov	r23, r22
 8ba:	6a 2f       	mov	r22, r26
 8bc:	11 24       	eor	r1, r1
 8be:	9f 57       	subi	r25, 0x7F	; 127
 8c0:	50 40       	sbci	r21, 0x00	; 0
 8c2:	9a f0       	brmi	.+38     	; 0x8ea <__mulsf3_pse+0x88>
 8c4:	f1 f0       	breq	.+60     	; 0x902 <__stack+0x3>
 8c6:	88 23       	and	r24, r24
 8c8:	4a f0       	brmi	.+18     	; 0x8dc <__mulsf3_pse+0x7a>
 8ca:	ee 0f       	add	r30, r30
 8cc:	ff 1f       	adc	r31, r31
 8ce:	bb 1f       	adc	r27, r27
 8d0:	66 1f       	adc	r22, r22
 8d2:	77 1f       	adc	r23, r23
 8d4:	88 1f       	adc	r24, r24
 8d6:	91 50       	subi	r25, 0x01	; 1
 8d8:	50 40       	sbci	r21, 0x00	; 0
 8da:	a9 f7       	brne	.-22     	; 0x8c6 <__mulsf3_pse+0x64>
 8dc:	9e 3f       	cpi	r25, 0xFE	; 254
 8de:	51 05       	cpc	r21, r1
 8e0:	80 f0       	brcs	.+32     	; 0x902 <__stack+0x3>
 8e2:	0c 94 7a 03 	jmp	0x6f4	; 0x6f4 <__fp_inf>
 8e6:	0c 94 c5 03 	jmp	0x78a	; 0x78a <__fp_szero>
 8ea:	5f 3f       	cpi	r21, 0xFF	; 255
 8ec:	e4 f3       	brlt	.-8      	; 0x8e6 <__mulsf3_pse+0x84>
 8ee:	98 3e       	cpi	r25, 0xE8	; 232
 8f0:	d4 f3       	brlt	.-12     	; 0x8e6 <__mulsf3_pse+0x84>
 8f2:	86 95       	lsr	r24
 8f4:	77 95       	ror	r23
 8f6:	67 95       	ror	r22
 8f8:	b7 95       	ror	r27
 8fa:	f7 95       	ror	r31
 8fc:	e7 95       	ror	r30
 8fe:	9f 5f       	subi	r25, 0xFF	; 255
 900:	c1 f7       	brne	.-16     	; 0x8f2 <__mulsf3_pse+0x90>
 902:	fe 2b       	or	r31, r30
 904:	88 0f       	add	r24, r24
 906:	91 1d       	adc	r25, r1
 908:	96 95       	lsr	r25
 90a:	87 95       	ror	r24
 90c:	97 f9       	bld	r25, 7
 90e:	08 95       	ret

00000910 <__fp_mpack>:
 910:	9f 3f       	cpi	r25, 0xFF	; 255
 912:	31 f0       	breq	.+12     	; 0x920 <__fp_mpack_finite+0xc>

00000914 <__fp_mpack_finite>:
 914:	91 50       	subi	r25, 0x01	; 1
 916:	20 f4       	brcc	.+8      	; 0x920 <__fp_mpack_finite+0xc>
 918:	87 95       	ror	r24
 91a:	77 95       	ror	r23
 91c:	67 95       	ror	r22
 91e:	b7 95       	ror	r27
 920:	88 0f       	add	r24, r24
 922:	91 1d       	adc	r25, r1
 924:	96 95       	lsr	r25
 926:	87 95       	ror	r24
 928:	97 f9       	bld	r25, 7
 92a:	08 95       	ret

0000092c <__fp_powser>:
 92c:	df 93       	push	r29
 92e:	cf 93       	push	r28
 930:	1f 93       	push	r17
 932:	0f 93       	push	r16
 934:	ff 92       	push	r15
 936:	ef 92       	push	r14
 938:	df 92       	push	r13
 93a:	7b 01       	movw	r14, r22
 93c:	8c 01       	movw	r16, r24
 93e:	68 94       	set
 940:	06 c0       	rjmp	.+12     	; 0x94e <__fp_powser+0x22>
 942:	da 2e       	mov	r13, r26
 944:	ef 01       	movw	r28, r30
 946:	0e 94 2e 04 	call	0x85c	; 0x85c <__mulsf3x>
 94a:	fe 01       	movw	r30, r28
 94c:	e8 94       	clt
 94e:	a5 91       	lpm	r26, Z+
 950:	25 91       	lpm	r18, Z+
 952:	35 91       	lpm	r19, Z+
 954:	45 91       	lpm	r20, Z+
 956:	55 91       	lpm	r21, Z+
 958:	a6 f3       	brts	.-24     	; 0x942 <__fp_powser+0x16>
 95a:	ef 01       	movw	r28, r30
 95c:	0e 94 40 02 	call	0x480	; 0x480 <__addsf3x>
 960:	fe 01       	movw	r30, r28
 962:	97 01       	movw	r18, r14
 964:	a8 01       	movw	r20, r16
 966:	da 94       	dec	r13
 968:	69 f7       	brne	.-38     	; 0x944 <__fp_powser+0x18>
 96a:	df 90       	pop	r13
 96c:	ef 90       	pop	r14
 96e:	ff 90       	pop	r15
 970:	0f 91       	pop	r16
 972:	1f 91       	pop	r17
 974:	cf 91       	pop	r28
 976:	df 91       	pop	r29
 978:	08 95       	ret

0000097a <__divmodhi4>:
 97a:	97 fb       	bst	r25, 7
 97c:	07 2e       	mov	r0, r23
 97e:	16 f4       	brtc	.+4      	; 0x984 <__divmodhi4+0xa>
 980:	00 94       	com	r0
 982:	07 d0       	rcall	.+14     	; 0x992 <__divmodhi4_neg1>
 984:	77 fd       	sbrc	r23, 7
 986:	09 d0       	rcall	.+18     	; 0x99a <__divmodhi4_neg2>
 988:	0e 94 02 05 	call	0xa04	; 0xa04 <__udivmodhi4>
 98c:	07 fc       	sbrc	r0, 7
 98e:	05 d0       	rcall	.+10     	; 0x99a <__divmodhi4_neg2>
 990:	3e f4       	brtc	.+14     	; 0x9a0 <__divmodhi4_exit>

00000992 <__divmodhi4_neg1>:
 992:	90 95       	com	r25
 994:	81 95       	neg	r24
 996:	9f 4f       	sbci	r25, 0xFF	; 255
 998:	08 95       	ret

0000099a <__divmodhi4_neg2>:
 99a:	70 95       	com	r23
 99c:	61 95       	neg	r22
 99e:	7f 4f       	sbci	r23, 0xFF	; 255

000009a0 <__divmodhi4_exit>:
 9a0:	08 95       	ret

000009a2 <__udivmodsi4>:
 9a2:	a1 e2       	ldi	r26, 0x21	; 33
 9a4:	1a 2e       	mov	r1, r26
 9a6:	aa 1b       	sub	r26, r26
 9a8:	bb 1b       	sub	r27, r27
 9aa:	fd 01       	movw	r30, r26
 9ac:	0d c0       	rjmp	.+26     	; 0x9c8 <__udivmodsi4_ep>

000009ae <__udivmodsi4_loop>:
 9ae:	aa 1f       	adc	r26, r26
 9b0:	bb 1f       	adc	r27, r27
 9b2:	ee 1f       	adc	r30, r30
 9b4:	ff 1f       	adc	r31, r31
 9b6:	a2 17       	cp	r26, r18
 9b8:	b3 07       	cpc	r27, r19
 9ba:	e4 07       	cpc	r30, r20
 9bc:	f5 07       	cpc	r31, r21
 9be:	20 f0       	brcs	.+8      	; 0x9c8 <__udivmodsi4_ep>
 9c0:	a2 1b       	sub	r26, r18
 9c2:	b3 0b       	sbc	r27, r19
 9c4:	e4 0b       	sbc	r30, r20
 9c6:	f5 0b       	sbc	r31, r21

000009c8 <__udivmodsi4_ep>:
 9c8:	66 1f       	adc	r22, r22
 9ca:	77 1f       	adc	r23, r23
 9cc:	88 1f       	adc	r24, r24
 9ce:	99 1f       	adc	r25, r25
 9d0:	1a 94       	dec	r1
 9d2:	69 f7       	brne	.-38     	; 0x9ae <__udivmodsi4_loop>
 9d4:	60 95       	com	r22
 9d6:	70 95       	com	r23
 9d8:	80 95       	com	r24
 9da:	90 95       	com	r25
 9dc:	9b 01       	movw	r18, r22
 9de:	ac 01       	movw	r20, r24
 9e0:	bd 01       	movw	r22, r26
 9e2:	cf 01       	movw	r24, r30
 9e4:	08 95       	ret

000009e6 <__umulhisi3>:
 9e6:	a2 9f       	mul	r26, r18
 9e8:	b0 01       	movw	r22, r0
 9ea:	b3 9f       	mul	r27, r19
 9ec:	c0 01       	movw	r24, r0
 9ee:	a3 9f       	mul	r26, r19
 9f0:	70 0d       	add	r23, r0
 9f2:	81 1d       	adc	r24, r1
 9f4:	11 24       	eor	r1, r1
 9f6:	91 1d       	adc	r25, r1
 9f8:	b2 9f       	mul	r27, r18
 9fa:	70 0d       	add	r23, r0
 9fc:	81 1d       	adc	r24, r1
 9fe:	11 24       	eor	r1, r1
 a00:	91 1d       	adc	r25, r1
 a02:	08 95       	ret

00000a04 <__udivmodhi4>:
 a04:	aa 1b       	sub	r26, r26
 a06:	bb 1b       	sub	r27, r27
 a08:	51 e1       	ldi	r21, 0x11	; 17
 a0a:	07 c0       	rjmp	.+14     	; 0xa1a <__udivmodhi4_ep>

00000a0c <__udivmodhi4_loop>:
 a0c:	aa 1f       	adc	r26, r26
 a0e:	bb 1f       	adc	r27, r27
 a10:	a6 17       	cp	r26, r22
 a12:	b7 07       	cpc	r27, r23
 a14:	10 f0       	brcs	.+4      	; 0xa1a <__udivmodhi4_ep>
 a16:	a6 1b       	sub	r26, r22
 a18:	b7 0b       	sbc	r27, r23

00000a1a <__udivmodhi4_ep>:
 a1a:	88 1f       	adc	r24, r24
 a1c:	99 1f       	adc	r25, r25
 a1e:	5a 95       	dec	r21
 a20:	a9 f7       	brne	.-22     	; 0xa0c <__udivmodhi4_loop>
 a22:	80 95       	com	r24
 a24:	90 95       	com	r25
 a26:	bc 01       	movw	r22, r24
 a28:	cd 01       	movw	r24, r26
 a2a:	08 95       	ret

00000a2c <_exit>:
 a2c:	f8 94       	cli

00000a2e <__stop_program>:
 a2e:	ff cf       	rjmp	.-2      	; 0xa2e <__stop_program>
